["public class GUIGlobals {", "    public void abort(Executor executor) throws SQLException {", "    boolean showPrintDialog(PrinterJob job);", "    private void doCleanup(CleanupPreset preset, BibEntry entry, NamedCompound ce) {", "public class ManageJournalAbbreviationsViewModel extends AbstractViewModel {", "    private final Set<ExternalFileType> externalFileTypes = new TreeSet<>(Comparator.comparing(ExternalFileType::getName));", "        if (preferences.isMrdlibAccepted()) {", "        resolveStringsAllProperty.setValue(preferences.getBoolean(JabRefPreferences.RESOLVE_STRINGS_ALL_FIELDS)); // Flipped around", "                Globals.REMOTE_LISTENER.openAndStart(new JabRefMessageHandler(), remotePreferences.getPort());", "            URL searchURL = new URL(url);", "    public static void showContextMenu(TextArea textArea, ContextMenu contextMenu, ContextMenuEvent e) {", "        anySelectedEntriesMatched.invalidate();", "    private final TextField nameField = new TextField();", "            List<Path> files = entry.getFiles().stream()", "    public static final int REMOVE_NODE_KEEP_CHILDREN = 1;", "    public void toggle(SidePaneType type) {", "        actions.put(Actions.PASTE, this::paste);", "    public ZipFileChooser(FileSystem zipFile) throws IOException {", "        VBox container = new VBox();", "            background.setWidth(getDesiredWidth());", "public class CitationStyleToClipboardWorker {", "        PseudoClass rootPseudoClass = PseudoClass.getPseudoClass(\"root\");", "        VBox contextPanel = new VBox(10);", "    requires org.jabref.thirdparty.libreoffice;", "    void showWarningDialogAndWait(String title, String content);", "    public void importButtonClicked() {", "        actions.put(Actions.COPY, this::copy);", "    public void rollback(Savepoint savepoint) throws SQLException {", "        Exporter defaultChoice = exporters.stream()", "public class CustomizeExternalFileTypesDialog extends BaseDialog<Void> {", "        return false;", "        groupTree.getSelectionModel().setSelectionMode(SelectionMode.MULTIPLE);", "        this.executorService.shutdown();", "        group.getGroupNode().addEntriesToGroup(stateManager.getSelectedEntries());", "                UpdateField.setAutomaticFields(bibEntry, true, true, Globals.prefs.getUpdateFieldPreferences());", "        for (Map.Entry<String, Set<Field>> tab : entryEditorPreferences.getEntryEditorTabList().entrySet()) {", "    public SortedMap<KeyBinding, String> getKeyBindings() {", "        for (String key : cited) {", "            int maxAuthorsFirst = style.getIntCitProperty(OOBibStyle.MAX_AUTHORS_FIRST);", "            BasePanel panel = getCurrentBasePanel();", "public class BibEntrySuggestionProvider extends SuggestionProvider<BibEntry> implements AutoCompleteSuggestionProvider<BibEntry> {", "public class Tag<T> extends HBox {", "        List<Formatter> caseChangers = new ArrayList<>();", "            row.contextMenuProperty().bind(", "    public BooleanProperty autosaveLocalLibrariesProperty() { return autosaveLocalLibraries; }", "            DefaultTaskExecutor.runInJavaFXThread(() -> frame.getGlobalSearchBar().performSearch());", "    public void updateFont() {", "                this.dragStarted = System.currentTimeMillis();", "public abstract class AbstractPushToApplication implements PushToApplication {", "        save();", "            stringBuilder.append(txt, piv, ind); // Text leading up to s1", "public class OldDatabaseCommandWrapper extends CommandBase {", "    public void selectLastJournalFile() {", "", "    Optional<String> showInputDialogAndWait(String title, String content);", "        Map<BibEntry, BibDatabase> entries = findCitedEntries(databases, cited, linkSourceBase); // Although entries are redefined without use, this also updates linkSourceBase", "        if (specialField == SpecialField.READ_STATUS) {", "    protected abstract void bindToEntry(BibEntry entry);", "        ContextMenu typeMenu = new ChangeEntryTypeMenu().getChangeEntryTypePopupMenu(entry, databaseContext, undoManager);", "    public String getDefaultKeyBinding() {", "        if (end < line.length()) {", "        UpdateField.setAutomaticFields(entries, updateFieldPreferences);", "        xSet.insert(xImpLoader.activate(\"com.sun.star.comp.connections.Acceptor\", null, null, null));", "            refresh();", "        return false;", "    public void insertEntry(List<BibEntry> entries, BibDatabase database,", "    public static void openConsole(File file) throws IOException {", "        textFlow.getChildren().add(TooltipTextUtil.createText(String.format(\"%s \", Localization.lang(\"This search contains entries in which\")), TooltipTextUtil.TextType.NORMAL));", "        int tabNumber = 0;", "public class OldCommandWrapperForActiveDatabase extends CommandBase {", "            BibtexString bs = new BibtexString(label, disk);", "        frame.setWindowTitle();", "        if (!identicalTypes && !typeRadioButtons.isEmpty() && typeRadioButtons.get(0).isSelected()) {", "        boolean first = false;", "        List<BibEntry> selectedEntries = basePanel.getSelectedEntries();", "            String[] pairs = query.split(\"&\");", "                if (remoteClient.sendCommandLineArguments(args)) {", "    <R> Optional<R> showCustomDialogAndWait(Dialog<R> dialog);", "    public static final int WIDTH_ICON_COL_RANKING = 5 * 16; // Width of Ranking Icon Column", "                System.out.println(Localization.lang(\"Importing in unknown format\") + \": \" + file);", "    public void setNetworkTimeout(Executor executor, int milliseconds) throws SQLException {", "        boolean modificationsAgree = (DuplicateCheck.compareEntriesStrictly(memEntry, diskEntry) > 1);", "    private TableColumn<BibEntryTableViewModel, Field> createUrlOrDoiColumn(JabRefIcon icon, Field firstField, Field secondField) {", "                    defTypes.remove(found);", "public class CheckForNewEntryTypesAction implements GUIPostOpenAction {", "    public List<String> parseRefMarkName(String name) {", "            field = StandardField.URL;", "public abstract class MapBasedEditorViewModel<T> extends OptionEditorViewModel<T> {", "        entries = basePanel.getSelectedEntries();", "        ATTACH_FILE(MaterialDesignIcon.PAPERCLIP) /*css: paperclip*/,", "        SearchQuery searchQuery = new SearchQuery(\"Journal Title 500\", false, false);", "        alert.setDialogPane(new DialogPane() {", "                        LOGGER.debug(\"Mode LINK\");", "    public BooleanProperty useFileBrowserDefaultProperty() { return this.useFileBrowserDefaultProperty; }", "    protected abstract Comparator<T> getComparator();", "        if (!newerVersion.isPresent() || (newerVersion.get().equals(toBeIgnored) && !manualExecution)) {", "    protected final TextField defaultPat = new TextField();", "    public boolean setNewBinding(KeyEvent evt) {", "    public static List<Text> formatToTexts(String original, TextReplacement... replacements) {", "public class UndoableChangeType extends AbstractUndoableJabRefEdit {", "    public MergeEntries(BibEntry entryLeft, BibEntry entryRight, BibDatabaseMode type) {", "                                LinkedFileViewModel linkedFileViewModel = new LinkedFileViewModel(linkedFiles.get(0), entry.getEntry(), database, Globals.TASK_EXECUTOR, dialogService, Globals.prefs.getXMPPreferences(), Globals.prefs.getFilePreferences(), externalFileTypes);", "                        LOGGER.debug(\"Mode LINK\");", "    public void moveDown(SidePaneComponent comp) {", "            root.setSelected(false);", "    public AppearancePrefsTab(DialogService dialogService, JabRefPreferences prefs) {", "    public static Optional<String> getSuffix(final String link) {", "    private static Image getImageFX(String name) {", "    public String getConstant() {", "    List<Path> showFileOpenDialogAndGetMultipleFiles(FileDialogConfiguration fileDialogConfiguration);", "            if (query == null) {", "public class VersionWorker {", "                        LOGGER.debug(\"Mode COPY\");", "    public void deleteAbbreviation() {", "public class PersistenceVisualStateTable {", "    protected static ClipboardContent processRtf(List<String> citations) {", "        return GroupHierarchyType.INDEPENDENT; // default", "                            refKeys.get(marker).add(currentKey);", "    public boolean isGeneratedNameSameAsOriginal() {", "    public Image render(int width, int height) {", "            xViewCursor.gotoRange(position, false);", "public class EntryTypeView extends BaseDialog<EntryType> {", "            base.addString(string);", "    public void setProgressBarIndeterminate(final boolean value) {", "    protected boolean couldNotCall; // Set to true in case the command could not be executed, e.g., if the file is not found", "    public void setProgressBarVisible(final boolean visible) {", "                    if (!sb.toString().trim().isEmpty()) {", "                        if (!resultDatabase.getEntryByKey(crossref).isPresent()) {", "        if (panel != null) {", "            cleanUpMovePDF.setDisable(true);", "        database.getDatabase().insertEntries(entries);", "    public JabRefAction(Action action, Command command, KeyBindingRepository keyBindingRepository, Sources source) {", "    protected abstract boolean isMatch(T suggestion, ISuggestionRequest request);", "        base.setPreamble(oldValue);", "        final boolean namesNatbib = Globals.prefs.getBoolean(JabRefPreferences.NAMES_NATBIB); //MK:", "    public abstract void makeChange(BibDatabaseContext database, NamedCompound undoEdit);", "package org.jabref.gui.autocompleter;", "    public static final int REMOVE_NODE_AND_CHILDREN = 2;", "            populateSubMenu(items, \"IEEETran\", IEEETranEntryTypeDefinitions.ALL, entry, undoManager);", "        return null;", "    public void releaseSavepoint(Savepoint savepoint) throws SQLException {", "        List<ExternalFileType> types = new ArrayList<>(getDefaultExternalFileTypes());", "            basePanel.getUndoManager().registerListener(new UndoRedoEventManager());", "        EXPORT_TO_CLIPBOARD(MaterialDesignIcon.CLIPBOARD_ARROW_LEFT) /*css: clipboard-arrow-left */,", "public class IconValidationDecorator extends GraphicValidationDecoration {", "        MetaData metaData = panel.getBibDatabaseContext().getMetaData();", "    public void requestFocus(Field fieldName) {", "        boolean hadBibSection = getBookmarkRange(OOBibBase.BIB_SECTION_NAME) != null;", "    public void showAndEdit(BibEntry entry) {", "    public boolean equals(Object object) {", "public class PersonNameSuggestionProvider extends SuggestionProvider<Author> implements AutoCompleteSuggestionProvider<Author> {", "    public <T> Future<T> execute(Callable<T> command) {", "    public void clearLog() {", "    public boolean delete() {", "    public static <T> SuggestionProvider<T> create(Collection<T> possibleSuggestions) {", "            } else {", "public class ActionFactory {", "                Method getLabel = ContextMenuContent.MenuItemContainer.class.getDeclaredMethod(\"getLabel\");", "public class HelpAction extends SimpleCommand {", "        for (ParserResult pr : toOpenTab) {", "        SearchQuery searchQuery = new SearchQuery(\"Journal Title 500\", false, false);", "                                                         }));", "    private void applyPreferences() {", "        LocalDate date = dateTime.query(TemporalQueries.localDate());", "public class UndoableRemoveEntry extends AbstractUndoableJabRefEdit {", "        actions.put(Actions.COPY_KEY, this::copyKey);", "            BackgroundTask<Image> generateImage = BackgroundTask", "    public abstract int getPageNumber();", "public class UnlinkedPDFFileFilter implements FileFilter {", "            if (REMOTE_LINK_PATTERN.matcher(link).matches()) {", "        return JabRefIcons.GROUP_INTERSECTION.getGraphicNode();", "    public void addAbbreviation(String name, String abbreviation) {", "        if (!toAdd.isEmpty()) {", "        xSet.insert(xImpLoader.activate(\"com.sun.star.comp.loader.JavaLoader\", null, null, null));", "    public JabRefIcon getTypeIcon() {", "            String sOffice = System.getProperty(\"os.name\").startsWith(\"Windows\") ? \"soffice.exe\" : \"soffice\";", "        actions.put(Actions.COPY_KEY_AND_LINK, new CopyBibTeXKeyAndLinkAction(mainTable, Globals.clipboardManager));", "    public void afterOpening() {", "    public void clearAndSelect(final BibEntry bibEntry) {", "    boolean showConfirmationDialogAndWait(String title, String content);", "            Optional<String> valInNewField = entry.getField(newField);", "        GroupTreeNode newParent = root.getNode().getDescendant(pathToNewParent).get(); //TODO: NULL", "            return;", "public class CustomLocalDragboard {", "                    } catch (KeyCollisionException e) {", "        SpecialFieldViewModel priorityViewModel = new SpecialFieldViewModel(SpecialField.PRIORITY, undoManager);", "    private final GroupTreeNode m_subtreeBackup;", "    public AbbreviationsFileViewModel(List<AbbreviationViewModel> abbreviations, String name) {", "        getGroupNode().moveTo(target.getGroupNode());", "    List<String> getRestartWarnings();", "package org.jabref.gui.autocompleter;", "    private static final String GOOGLE_SEARCH_EXP = \"^https?://(?:www\\\\.)?google\\\\.[\\\\.a-z]+?/url.*\";", "public class OpenDatabaseAction extends SimpleCommand {", "    public Optional<ExternalFileType> getExternalFileTypeByName(String name) {", "        String pairs[] = null;", "                        LOGGER.debug(\"Mode LINK\");", "                    List<LinkedFile> files = bes.get(0).getFiles();", "        ADD_ROW(MaterialDesignIcon.SERVER_PLUS) /* css: server-plus*/,", "public class FXDialog extends Alert {", "        READ_STATUS(MaterialDesignIcon.EYE), /*css: eye */", "                if (!cssUri.toString().contains(\"jar\")) {", "        protected boolean isMatch(T suggestion, ISuggestionRequest request) {", "public class DatabaseChangeEvent {", "        if (Globals.prefs == null) {", "    public BackgroundTask<V> onFailure(Consumer<Exception> onException) {", "public class ManageJournalAbbreviationsView extends BaseDialog<Void> {", "            if (!loaded.isEmpty()) {", "            if (InternalField.TYPE_HEADER.equals(field) || InternalField.OBSOLETE_TYPE_HEADER.equals(field)", "    public static final XComponentContext bootstrap(String[] argArray, URLClassLoader loader) throws BootstrapException {", "public class JabRefExecutorService {", "            Map<String, List<String>> refKeys = new HashMap<>();", "        postUndoRedoEvent(); // Send event to trigger changes", "        actions.put(Actions.COPY_CITE_KEY, this::copyCiteKey);", "            return Optional.empty();", "public class UiThreadObservableList<E> implements ObservableList<E> {", "    public static Supplier<List<MenuItem>> getNameMenu(final TextInputControl textInput) {", "public class MassSetFieldsAction extends SimpleCommand {", "public class TemporalAccessorPicker extends DatePicker {", "            Class<?> clazz = Class.forName(\"javafx.scene.control.TableUtil\");", "        if (prefs.getBoolean(JabRefPreferences.OPEN_LAST_EDITED)) {", "    public void openPdfWithParameters(String filePath, List<String> parameters) throws IOException {", "    public BackgroundTask<V> onSuccess(Consumer<V> onSuccess) {", "        return null;", "package oracle.jdbc;", "    requires java.annotation;", "    public void setValues() {", "        return null;", "            String[] cmdArray = new String[argArray.length + 2];", "        if (!toRemove.isEmpty()) {", "public class AbbreviationsFileViewModel {", "        List<BibEntry> entriesToAdd = Globals.clipboardManager.extractData();", "    private ObjectProperty<IconTheme.JabRefIcons> glyph;", "        return null;", "    private BasePanelMode mode = BasePanelMode.SHOWING_NOTHING;", "            return true;", "    private static void setGraphic(MenuItem node, Action action) {", "    public boolean dragDropped(ListProperty<PreviewLayout> targetList, Dragboard dragboard) {", "    public static void openExternalViewer(BibDatabaseContext databaseContext, String initialLink, Field initialField)", "                    clonedEntry.getField(StandardField.CROSSREF).ifPresent(crossref -> {", "        actions.put(Actions.COPY_TITLE, this::copyTitle);", "                boolean bibExtension = aLeftOver.toLowerCase(Locale.ENGLISH).endsWith(\"bib\");", "        String[][] vals = StringUtil", "    public static void openBrowser(String url) throws IOException {", "                    tabbedPane.getTabs().get(i).setText(getBasePanelAt(i).getTabTitle());", "        for (int i = 0; i < tabbedPane.getTabs().size(); i++) {", "    public boolean quit() {", "            ImportFormatPreferences importFormatPreferences = Globals.prefs.getImportFormatPreferences();", "        stopRemoteThread();", "        cleanupEnabled.selectedProperty().addListener(new EnablementStatusListener<>(fieldFormatterCleanups.isEnabled()));", "        INTEGRITY_FAIL(Color.RED, MaterialDesignIcon.CLOSE_CIRCLE), /*css: close-circle */", "            String[] allParams = {viewModel.getLocalization(), params[0], params[1]};", "                    return true;", "            visibleComponents.sort(new PreferredIndexSort());", "            String quotePath = \"\\\"\" + filePath + \"\\\"\";", "    public BasePanel getCurrentBasePanel() {", "                throw new IllegalStateException(parserResult.getErrorMessage());", "    private String[] getStringArrayRepresentation(ExternalFileType type) {", "    public BibEntry getMergeEntry() {", "    private void showConnectionError(Exception exception, boolean manualExecution) {", "    public String getIconName() {", "            } else if (answer == DuplicateResolverDialog.DuplicateResolverResult.KEEP_BOTH) {", "    public void setSchema(String schema) throws SQLException {", "            if (Globals.prefs.getBoolean(JabRefPreferences.AUTO_ASSIGN_GROUP)) {"]