["    public SuggestionProviders getSuggestionProviders() {", "            URL url = new URL(link);", "    private void setupAutoCompletion() {", "        FILE_EXCEL(MaterialDesignIcon.FILE_EXCEL), /*css: file-excel */", "    private boolean isExistURLorDOI(List<BibEntry> selectEntryList) {", "        keywordGroupSearchField.setText(prefs.get(JabRefPreferences.GROUPS_DEFAULT_FIELD));", "        return false;", "        tearDownJabRef(filenames);", "                        return Date.parse(string).map(Date::toTemporalAccessor).orElse(null);", "            entryEditor.setFocusToField(field);", "    void notify(String message);", "    public void delete(boolean cut) {", "        entryEditorTabs.add(new OtherFieldsTab(databaseContext, panel.getSuggestionProviders(), undoManager,", "@SuppressWarnings(\"unused\") // class is indirectly constructed by log4j", "    private static Label getAssociatedNode(MenuItem menuItem) {", "                if (toRemove != null) {", "    private PersonNameSuggestionProvider searchAutoCompleter;", "        mainTable.addSelectionListener(listEvent -> Globals.stateManager.setSelectedEntries(mainTable.getSelectedEntries()));", "    public static final XComponentContext defaultBootstrap_InitialComponentContext(String ini_file, Map<String, String> bootstrap_parameters) throws Exception {", "            if (result == DuplicateResolverDialog.DuplicateResolverResult.KEEP_LEFT) {", "            result = OpenDatabase.loadDatabase(diskdb.toAbsolutePath().toString(), importFormatPreferences, Globals.getFileUpdateMonitor());", "    public static void showContextMenu(TextField textField, ContextMenu contextMenu, ContextMenuEvent e) {", "        entriesSorted = new SortedList<>(entriesFiltered);", "    public static URL getIconUrl(String name) {", "        button.graphicProperty().unbind();", "    public List<FieldChange> addEntriesToGroup(List<BibEntry> entries) {", "            dialogService.notify(Localization.lang(\"Modified group \\\"%0\\\".\", group.getName()));", "public class DragAndDropDataFormats {", "            switch (data.length) {", "                        List<Integer> num = new ArrayList<>(keys.length);", "class UndefinedCharacterFormatException extends Exception {", "    private List<Integer> findCitedEntryIndex(String citRefName, List<String> keys) {", "            switch (ControlHelper.getDroppingMouseLocation(row, event)) {", "                output(Localization.lang(\"Copied\") + \" '\" + JabRefDialogService.shortenDialogMessage(copiedCiteCommand) + \"'.\");", "public class OpenHyperlinksInExternalBrowser implements ChangeListener<Worker.State>, EventListener {", "                range = footer.getAnchor();", "        ContextMenu fetcherMenu = new ContextMenu();", "    public void putPreviewLayouts(List<PreviewLayout> previewLayouts) {", "public class AutoLinkFilesAction extends SimpleCommand {", "    private Optional<ParserResult> fetch(String fetchCommand) {", "    private static final int WIDTH = 100; // Number of characters per line", "    private <T> AutoCompletePopup<T> getPopup(AutoCompletionBinding<T> autoCompletionBinding) {", "                        JabRefGUI.getMainFrame().addParserResult(pr, focusPanel)", "        return null;", "            stateManager.activeSearchQueryProperty().set(newBasePanel.getCurrentSearchQuery());", "    public <T> BackgroundTask<T> thenRun(Function<V, T> nextOperation) {", "                entries.add(diag.getMergedEntry());", "public class UndoableInsertEntry extends AbstractUndoableJabRefEdit {", "                        uniquefiers.put(key, String.valueOf((char) uniq));", "        for (Observable observable : newEntry.getObservables()) {", "        return null;", "            lp = new File(commandPath + \".in\");", "        return null;", "                        FadeTransition fadeIn = new FadeTransition(Duration.millis(100), imageView);", "        XNamed xNamed = UnoRuntime.queryInterface(XNamed.class, bookmark);", "    public String getDisplayText() {", "            tableView.addEventHandler(KeyEvent.KEY_RELEASED, event -> {", "        List<EntryEditorTab> toBeRemoved = tabs.stream().filter(tab -> !tab.shouldShow(entry)).collect(Collectors.toList());", "                    LOGGER.debug(\"Node LINK\"); //alt on win", "        text = viewModel.userSpecificFileDirectoryProperty().getValue();", "    private GridPane getSelectorPanel() {", "                            break;", "    public static <T> ObservableList<T> forUI(ObservableList<T> list) {", "        Globals.protectedTermsLoader = new ProtectedTermsLoader(Globals.prefs.getProtectedTermsPreferences());", "            fields.add(InternalField.KEY_FIELD);", "        Injector.setInstanceSupplier(DefaultInjector::createDependency);", "                    toOpenTab.add(pr);", "        String text = defaultPat.getText();", "    public void openFiles(List<Path> filesToOpen, boolean raisePanel) {", "public class BindingsHelper {", "        DecorationPane root = new DecorationPane();", "        if (nameChange) {", "            Field privateStringField = TableView.class.getDeclaredField(\"contentWidth\");", "                            LOGGER.debug(\"Mode Copy\"); //ctrl on win", "                .ifPresent(newGroups::moveTo);", "    void addBuiltInLists() {", "public abstract class SimpleCommand extends CommandBase {", "    public static final int ADD_NODE = 0;", "                    break;", "public class ConnectToSharedDatabaseCommand extends SimpleCommand {", "                    formatName = \"tablerefsabsbib\";", "        for (ExternalFileType type : unchanged) {", "        return null;", "    public static XComponentContext createInitialComponentContext(Hashtable<String, Object> context_entries) throws Exception {", "public class JabRefDesktop {", "    public static <A, B> MappedList<B, A> mapBacked(ObservableList<A> source, Function<A, B> mapper) {", "    public void installCss(Scene scene, JabRefPreferences preferences) {", "            selectDocument.setDisable(false);", "            preferences.setWorkingDir(path);", "public class RelatedArticlesTab extends EntryEditorTab {", "public class ThemeLoader {", "        String extensionString = exporter.getFileType().getExtensions().get(0);", "            for (BibDatabase loopDatabase : databases) {", "    private void updateView() {", "            Set<Field> jointFields = new TreeSet<>(Comparator.comparing(Field::getName));", "    private void openTheFile(Path file, boolean raisePanel) {", "public class DetectOpenOfficeInstallation {", "            background = new Rectangle(getDesiredWidth(), getDesiredHeight());", "public class FindFullTextAction extends SimpleCommand {", "public class UiThreadStringProperty extends StringProperty {", "    public SuggestionProviders() {", "        return changes;", "                    int uniq = 'a';", "    public void addNewSubgroup(GroupNodeViewModel parent) {", "            if (event.getCode() == KeyCode.ENTER) {", "    public static void openBrowserShowPopup(String url) {", "    protected static ClipboardContent processHtml(List<String> citations) {", "    private void updateExternalFileTypes() {", "    private void saveDividerLocation(Number position) {", "        OPEN(MaterialDesignIcon.FOLDER_OUTLINE) /*css: folder */,", "public class ViewModelTableRowFactory<S> implements Callback<TableView<S>, TableRow<S>> {", "    private static UndoableEdit massAppendField(Collection<BibEntry> entries, Field field, String textToAppend) {", "        for (ExternalFileType fileType : ExternalFileTypes.getDefaultExternalFileTypes()) {", "            if (identicalFields.contains(field)) {", "        String suffix;", "        if (command instanceof SimpleCommand) {", "    public void addListener(@SuppressWarnings(\"unused\") DatabaseChangeListener listener) {", "                    if (decode.matches(URL_EXP)) {", "    public static void runAndWaitInJavaFXThread(Runnable action) {", "            selectedFieldName.ifPresent(this::requestFocus);", "        if (selectedKeyBinding.isNull().get()) {", "    public void setHoldability(int holdability) throws SQLException {", "        return null;", "            ParserResult parserResult = OpenDatabase.loadDatabase(file.toFile(),", "    void showErrorDialogAndWait(String message);", "                        factory.createMenuItem(StandardActions.MERGE_DATABASE, new OldDatabaseCommandWrapper(Actions.MERGE_DATABASE, this, stateManager)), // TODO: merge with import", "public class BackupUIManager {", "public class AbstractViewModel {", "public class SaveDatabaseAction {", "        flow.estimatedScrollYProperty().addListener((observable, oldValue, newValue) -> scrollY.setValue(newValue));", "        FILE_POWERPOINT(MaterialDesignIcon.FILE_POWERPOINT), /*css: file-powerpoint */", "                dups = this.duplicates.poll(100, TimeUnit.MILLISECONDS);", "    requires java.desktop;", "class OOBibBase {", "        CONNECT_DB(MaterialDesignIcon.CLOUD_UPLOAD), /*cloud-upload*/", "    private void updateAfterPreferenceChanges() {", "    boolean showConfirmationDialogWithOptOutAndWait(String title, String content,", "        return null;", "            ControlsFxVisualizer visualizer = new ControlsFxVisualizer();", "            FileFinder fileFinder = FileFinders.constructFromConfiguration(Globals.prefs.getAutoLinkPreferences());", "        FIND_DUPLICATES(MaterialDesignIcon.CODE_EQUAL), /*css: code-equal */", "public final class EntryEditorTabList {", "                ExternalFileType type = CustomExternalFileType.buildFromArgs(val);", "                entries.remove(entry);", "            boolean success = saveDatabase(targetPath, false,", "    protected String getCommandName() {", "                    event.consume();", "    public abstract boolean shouldShow(BibEntry entry);", "public class UnlinkedFilesCrawler extends BackgroundTask<CheckBoxTreeItem<FileNodeWrapper>> {", "        TABLE_ICONS.put(SpecialField.PRINTED, icon);", "    public void shutdown() {", "    public static TextFormatter<String> getIntegerTextFormatter() {", "            panel.setSaving(false);", "            TABLE_ICONS.put(fileType.getField(), icon);", "    protected abstract void initParameters();", "class CreationException extends Exception {", "    public void show(SidePaneType type) {", "    private final Map<Actions, BaseAction> actions = new HashMap<>();", "        if (Globals.prefs.getBoolean(JabRefPreferences.FX_FONT_RENDERING_TWEAK)) {", "    public void storeSettings() {", "    public String getContents() {", "        VBox explicitPanel = createOptionsExplicitGroup();", "    private void setupKeyBindings() {", "            notifyNewSelectedFile(currentFile);", "                panel.runCommand(Actions.SAVE);", "    public <T> BackgroundTask<T> then(Function<V, BackgroundTask<T>> nextTaskFactory) {", "    private AutoCompletionTextInputBinding(final TextInputControl textInputControl,", "        TypedBibEntry typedEntry = new TypedBibEntry(entry, databaseContext.getMode());", "    void operationCompleted();", "            if (isLoaded(dbFile) || !dbFile.exists()) {", "                JabRefGUI.getMainFrame().getDialogService().notify(Localization.lang(\"Copied\") + \" '\" + JabRefDialogService.shortenDialogMessage(keyAndLink) + \"'.\");", "                        LOGGER.debug(\"Mode MOVE\");", "        public SuggestionProviderString(Callback<T, String> stringConverter) {", "    private void startSearch() {", "    void showErrorDialogAndWait(String title, String content, Throwable exception);", "    private final GroupTreeNode m_groupRoot;", "            return false;", "            for (int i = 0;; ++i) {", "            dialogService.notify(Localization.lang(\"Added group \\\"%0\\\".\", group.getName()));", "        TABLE_ICONS.put(StandardField.EPRINT, icon);", "    Path getApplicationDirectory();", "        new PersistenceVisualStateTable(this, Globals.prefs);", "            for (Field field : originalFields) {", "        return null;", "    private final Version installedVersion;", "            if (!this.getChildren().contains(moreLink)) {", "        public void dispose() {", "            File theFile = pr.getFile().get();", "    private class DocumentViewerPage implements Cell<DocumentPageViewModel, StackPane> {", "        browser.getEngine().getLoadWorker().progressProperty().addListener((observable, oldValue, newValue) -> {", "                if (pr.getFile().filter(path -> path.getAbsolutePath().equals(focusedFile)).isPresent()) {", "        if (panel == null) {", "                this.draggedItem.setExpanded(this.draggedItem.isExpanded());", "            root.setGroup(DefaultGroupsFactory.getAllEntriesGroup());", "            cache.remove(entry);", "        setPrefHeight(Double.POSITIVE_INFINITY);", "    public void setIconName(String name) {", "        File lp = new File(commandPath); // this needs to fixed because it gives \"asdf\" when going prefs.get(\"lyxpipe\")", "    private void onSelectedGroupChanged(ObservableList<GroupNodeViewModel> newValue) {", "            if (this.stringConverter == null) {", "public class ViewModelTreeTableCellFactory<S> implements Callback<TreeTableColumn<S, S>, TreeTableCell<S, S>> {", "    public void saveJournalAbbreviationFiles() {", "    public BooleanProperty markTimestampProperty() { return this.markTimestampProperty; }", "    public void setTransactionIsolation(int level) throws SQLException {", "    Optional<Path> showFileSaveDialog(FileDialogConfiguration fileDialogConfiguration);", "            basePanel.closeBottomPane();", "    public void append(LogEvent rawEvent) {", "    public <V> Future<V> execute(BackgroundTask<V> task) {", "        return null;", "        int row = 2;", "    public static String formatName(final String nameToFormat) {", "        TWITTER(MaterialDesignIcon.TWITTER), /* css: twitter */", "    private void initialize() {", "        return false;", "public class DefaultTaskExecutor implements TaskExecutor {", "        return null;", "                if (toRemove != null) {", "    public void afterOpening() {", "        if (!xNamedBookmarks.hasByName(name)) {", "        Optional<DocumentViewerPage> inMiddleOfViewport = Optional.empty();", "    public void writeOrCreate() throws IOException {", "            keywords.removeAll(keywordsToRemove);", "                                                                                   new MergeReviewIntoCommentAction(),", "            currentPage.set(", "        xSet.insert(xImpLoader.activate(\"com.sun.star.comp.connections.Connector\", null, null, null));", "        List<Future<Boolean>> futures = JabRefExecutorService.INSTANCE.executeAll(tasks);", "public abstract class SuggestionProvider<T> implements Callback<ISuggestionRequest, Collection<T>> {", "        options.addOption(\"h\", \"help\", false, Localization.lang(\"Display help on command line options\"));", "    String value();", "    public static void startBackgroundTasks() throws JabRefException {", "    public void clearSuggestions() {", "public class DatabaseChangeRegistration {", "        Globals.prefs.put(JabRefPreferences.LAST_USED_EXPORT, exporter.getName());", "        return null;", "public class JabRefMain extends Application {", "    public static Supplier<List<MenuItem>> getCleanupURLMenu(TextArea textArea) {", "    public void setTypeMap(Map<String, Class<?>> map) throws SQLException {", "                        pr.getDatabaseContext().clearDatabaseFile(); // do not open the original file", "    public void newFile(Path file) {", "    public ObjectBinding<T> orElse(T other) {", "    private CheckBoxTreeItem<FileNodeWrapper> searchDirectory(File directory, UnlinkedPDFFileFilter ff) {", "    public void setCurrentSearchQuery(Optional<SearchQuery> currentSearchQuery) {", "        List<LinkedFile> filesToSerialize = files.stream()", "                    ParserResult pr = importer.get().importDatabase(filename, Globals.prefs.getDefaultEncoding());", "                output(Localization.lang(\"Copied\") + \" '\" + JabRefDialogService.shortenDialogMessage(copiedKeys) + \"'.\");", "                    fieldChanges.add(new FieldChangeViewModel(field, memEntry, tmpEntry, mem.orElse(null), tmp.get(), disk.get()));", "        setGraphic(menu, action);", "    private void onDatabaseChanged(ListChangeListener.Change<? extends BibEntry> change) {", "        LOOKUP_IDENTIFIER(MaterialDesignIcon.MAGNIFY), // TODO: use WEB_SEARCH instead as soon as it is available", "        MOVE_TAB_ARROW(MaterialDesignIcon.ARROW_UP_BOLD), /*css:  arrow-up-bold */", "    public void jumpToEntry(ParsedEntryLink parsedEntryLink) {", "    private void populateTable() {", "    void setValues();", "            entries.removeIf(BibEntry::hasCiteKey);", "        StackPane helpButtonContainer = new StackPane();", "public final class ApplicationInsightsLogEvent extends ApplicationInsightsEvent {", "            if (!file.isPresent()) {", "        other = findInternalDuplicate(entry);", "    Optional<Path> showFileOpenDialog(FileDialogConfiguration fileDialogConfiguration);", "        XTextContent xChildSection = UnoRuntime.queryInterface(XTextContent.class, xChildNamed);", "public class PreviewViewer extends ScrollPane implements InvalidationListener {", "    public static Supplier<List<MenuItem>> getDefaultMenu(final TextInputControl textInput) {", "        this.bibDatabaseContext.getDatabase().registerListener(this);", "    private static BibEntry bestFit(BibEntry targetEntry, List<BibEntry> entries) {", "public class UndoablePreambleChange extends AbstractUndoableJabRefEdit {", "            String filePath = file.get().toString();", "    private ScrollPane getRelatedArticleInfo(List<BibEntry> list, MrDLibFetcher fetcher) {", "        XComponentContext xContext = org.jabref.gui.openoffice.Bootstrap.bootstrap(loader);", "                    Bounds anchorBounds = row.getBoundsInParent();", "public class OptionalObjectProperty<T> extends SimpleObjectProperty<Optional<T>> {", "            group.getGroupNode().removeAllChildren();", "            if (!overwriteKeys) {", "        String cmd = \"xdg-open \" + filePath.toAbsolutePath().getParent().toString(); //default command", "    private boolean confirmClose(BasePanel panel) {", "        setWrapText(true);", "public class CustomExternalFileType implements ExternalFileType {", "        ButtonType replaceEntries = new ButtonType(Localization.lang(\"Merge entries\"), ButtonBar.ButtonData.OK_DONE);", "        currentResults.setPrefWidth(150);", "        xChildNamed.setName(OOBibBase.BIB_SECTION_NAME);", "    private void addLinkedFileFromURL(URL url, BibEntry entry, Path targetDirectory) {", "    private void onActiveDatabaseChanged(Optional<BibDatabaseContext> newDatabase) {", "        OS.NEWLINE = Globals.prefs.get(JabRefPreferences.NEWLINE);", "        btnConnect.disableProperty().bind(viewModel.formValidation().validProperty().not());", "            BibEntry firstEntry = entries.get(0);", "    public boolean isResolved(BibEntry entry) {", "                mustTestCharFormat = false; // need to do this only once", "        } catch (MalformedURLException e) {", "public final class MappedList<A, B> extends TransformationList<A, B> {", "                cursor.collapseToEnd();", "public class UndoableFieldChange extends AbstractUndoableJabRefEdit {", "    public void runCommand(final Actions command) {", "    public void createFileObjects() {", "                Object[] permutedPart = new Object[to - from];", "public class ExternalFileTypes {", "        typeSubscription = EasyBind.subscribe(this.entry.typeProperty(), type -> {", "public class ContentSelectorSuggestionProvider implements AutoCompleteSuggestionProvider<String> {", "    private static ExternalFileTypes singleton;", "    private class InputMethodRequestsObject implements InputMethodRequests {", "        for (Iterator<Path> iterator = filesToOpen.iterator(); iterator.hasNext();) {", "            this.moveTo(target);", "                        if (keywordGroupRegExp.isSelected()) {", "    private static Map<String, String> readIconThemeFile(URL url, String prefix) {", "            xCursorProps.setPropertyValue(\"CharLocale\", new Locale(\"zxx\", \"\", \"\"));", "        if (cli.isPreferencesReset()) {", "            visibleComponents.add(component);", "    void performAction(BasePanel panel, ParserResult pr);", "    <V> Future<?> schedule(BackgroundTask<V> task, long delay, TimeUnit unit);", "public abstract class BackgroundTask<V> {", "        if (newGroups.getGroup() instanceof AllEntriesGroup) {", "            SDKShutdownActivity.INSTANCE.stopAll();", "                    if (i == 600) {", "            BibtexKeyPatternPreferences prefs = jabRefPreferences.getBibtexKeyPatternPreferences();", "                        ExplicitGroup group = new ExplicitGroup(\"Imported\", GroupHierarchyType.INDEPENDENT,", "            return false; // unknown, cannot un/abbreviate anything", "    public static void showParserResultWarningDialog(final ParserResult parserResult, final JabRefFrame jabRefFrame,", "class BibtexKeyPatternPrefTab extends BibtexKeyPatternPanel implements PreferencesTab {", "        fileChoice.itemsProperty().addListener(", "        HBox fontBox = new HBox();", "        getOpenDatabaseAction().openFile(file, true);", "                result.getDatabaseContext().clearDatabaseFile(); // do not open the original file", "                        throw new UndefinedCharacterFormatException(charStyle);", "            ProgressIndicator progress = new ProgressIndicator();", "        boolean italicize = style.getBooleanCitProperty(OOBibStyle.ITALIC_ET_AL);", "public class ValueTableCellFactory<S, T> implements Callback<TableColumn<S, T>, TableCell<S, T>> {", "interface PreferencesTab {", "            autoCompleter.setShowOnFocus(true);", "            }, 60000); // run in one minute", "        TABLE_ICONS.put(StandardField.PDF, icon);", "        prefs.putKeyPattern(keypatterns);", "        return 0;", "    public void saveEverythingAndUpdateAutoCompleter() {", "public class ManageProtectedTermsDialog extends BaseDialog<Void> {", "    public MergeEntries(BibEntry entryLeft, BibEntry entryRight, String headingLeft, String headingRight, BibDatabaseMode type) {", "    public interface PasteActionHandler {", "public class DefaultFileUpdateMonitor implements Runnable, FileUpdateMonitor {", "        if ((commandPath == null) || commandPath.trim().isEmpty()) {", "    Optional<String> showInputDialogWithDefaultAndWait(String title, String content, String defaultValue);", "    private GroupHierarchyType getContext() {", "    private Optional<Version> getNewVersion() throws IOException {", "        updateA.accept(propertyB.getValue());", "        Globals.prefs.put(JabRefPreferences.DEFAULT_BIBTEX_KEY_PATTERN, defaultPat.getText());", "    public boolean isExternalFileTypeByExt(String extension) {", "            String[] split = file.get().getFileName().toString().split(\"\\\\.\");", "public class DatabaseChangeEvent {", "        Optional<Path> fileDir = databaseContext.getFirstExistingFileDir(filePreferences);", "        for (int i = 0; (i < bibDatabases.size()) && (i < mainFrame.getBasePanelCount()); i++) {", "    private static void ensureCorrectJavaVersion() {", "public class CopyDoiUrlAction extends SimpleCommand {", "    private static BufferedImage resize(BufferedImage img, int newWidth, int newHeight) {", "public interface GUIPostOpenAction {", "abstract class FieldsEditorTab extends EntryEditorTab {", "public class NewSubLibraryAction extends SimpleCommand {", "class NoDocumentException extends Exception {", "            fields.addAll(entry.getFields());", "            if (newValue == null) {", "    public boolean validSettings() {", "        alert.getDialogPane().setExpandableContent(new Group());", "            ExternalFileType found = null;", "        if (application.requiresBibtexKeys()) {", "    protected static String processPreview(List<String> citations) {", "        final NamedCompound compound = new NamedCompound(Localization.lang(\"Autogenerate BibTeX keys\"));", "        addToGroups(entries, stateManager.getSelectedGroup(database));", "    public static ClipBoardManager clipboardManager = new ClipBoardManager();", "            return Collections.emptyList();", "    public static final int WIDTH_ICON_COL = 16 + 12; // add some additional space to improve appearance", "            for (BibEntry be : bes) {", "        if (changed) {", "            dialogService.showInformationDialogAndWait(", "            basePanel.closeBottomPane();", "                    break;", "    private final int m_subtreeRootChildCount;", "        RELEVANCE(MaterialDesignIcon.STAR_CIRCLE), /*css: star-circle */", "    public void clearWarnings() throws SQLException {", "                GroupTreeNode removedNode = cursor", "public class AutosaveUIManager {", "    public static List<MenuItem> getDefaultContextMenuItems(TextInputControl textInputControl) {", "            List<String> dir = databaseContext.getFileDirectories(field, Globals.prefs.getFilePreferences());", "        stateManager.activeDatabaseProperty().bind(", "        } else {", "                if (!handleMultipleAppInstances(arguments) || argumentProcessor.shouldShutDown()) {", "    private static String pathToClass(String basePath, Path path) {", "        boolean maskText = (textInputControl instanceof PasswordField); // (maskText(\"A\") != \"A\");", "public class AbbreviationViewModel {", "        return 0;", "        List<BibEntry> toRemove = new ArrayList<>(entries.size());", "        return null;", "        if (exporter != null) {", "                int[] permutation = new int[to - from];", "    private void addImportedEntries(final BasePanel panel, final List<BibEntry> entries) {", "        List<ImportFormatReader.UnknownFormatImport> imports = new ArrayList<>();", "public class EntryEditor extends BorderPane {", "    List<String> getRestartWarnings();", "        browser.addEventFilter(javafx.scene.input.MouseEvent.ANY, javafx.scene.input.MouseEvent::consume);", "public class SmartConstrainedResizePolicy implements Callback<TableView.ResizeFeatures, Boolean> {", "    private static final int WARNING_LIMIT = 5;", "        boolean mustTestCharFormat = style.isFormatCitations();", "                BackgroundTask.wrap(() -> openIt(file, dialog.importEntries(), dialog.importStrings(), dialog.importGroups(), dialog.importSelectorWords()))", "    boolean showConfirmationDialogAndWait(String title, String content, String okButtonLabel);", "        setupKeyBindings(keyBindingRepository);", "        List<EntryEditorTab> toBeRemoved = tabs.stream().filter(tab -> !tab.shouldShow(entry)).collect(Collectors.toList());", "    public void setReadOnly(boolean readOnly) throws SQLException {", "            return icon.getGraphicNode();", "            if (OS.OS_X) {", "    public BooleanProperty openLastStartupProperty() { return openLastStartupProperty; }", "        this.frame = frame;", "        return null;", "    public void setupAllTables() {", "                command = command.replace(\"%DIR\", absolutePath);", "        while (componentEnumeration.hasMoreElements()) {", "                output(Localization.lang(\"Copied\") + \" '\" + JabRefDialogService.shortenDialogMessage(copiedKeysAndTitles) + \"'.\");", "        double matchWithTmp = DuplicateCheck.compareEntriesStrictly(memEntry, tmpEntry);", "        ClipboardContent content = new ClipboardContent();", "public class OracleDriver {", "                if (strippedLink.substring(strippedLinkIndex + 1).indexOf('/') >= 1) {", "            EntryType oldType = originalEntry.getType();", "    private static UndoableEdit massSetField(Collection<BibEntry> entries, Field field, String textToSet,", "        CleanupWorker cleaner = new CleanupWorker(panel.getBibDatabaseContext(), preferences.getCleanupPreferences(", "    public void insertEntry(final BibEntry bibEntry) {", "    private BibEntry showing;", "public interface DatabaseChangeListener {", "    void pushEntries(BibDatabaseContext database, List<BibEntry> entries, String keyString);", "    private void generateKeys(List<BibEntry> entries) {", "public class JabRefDialogService implements DialogService {", "        entriesList = databaseContext.getDatabase().getEntries();", "            Class<?> clazz = Class.forName(\"javafx.scene.control.TableUtil\");", "            suggestionProviders = new SuggestionProviders();", "    public void beforeClosing() {", "    private void copyCitationToClipboard(CitationStyleOutputFormat outputFormat) {", "    private static void addGroups(GroupTreeNode newGroups, CompoundEdit ce) {", "                dialogService.notify(Localization.lang(\"Unable to save library\"));", "            mimeType = \"\";", "            return AutoCompleteFirstNameMode.BOTH;", "    requires java.prefs;", "        ContextMenu menu = new ContextMenu();", "                        for (int j = 0; j < cEntries.length; j++) {", "        BindingsHelper.bindContentBidirectional(", "            root.setSelected(true);", "        ToggleGroup groupType = new ToggleGroup();", "        Platform.runLater(() -> {", "            switch (m_editType) {", "    public List<String> refreshCiteMarkers(List<BibDatabase> databases, OOBibStyle style)", "    public static <V> V runInJavaFXThread(Callable<V> callable) {", "    public void setClientInfo(Properties properties) throws SQLClientInfoException {", "        TABLE_ICONS.put(StandardField.FILE, icon);", "            for (BibEntry entry : entries) {", "    public void copyLog(List<LogEventViewModel> messages) {", "            row.setOnDragDetected(event -> {", "    public void editGroup(GroupNodeViewModel oldGroup) {", "            Process p = Runtime.getRuntime().exec(cmdArray);", "    private final int m_editType;", "        String focusedFile = bibDatabases.stream()", "            Optional<Exporter> exporter = Globals.exportFactory.getExporterByName(formatName);", "    private ScrollPane getPrivacyDialog(BibEntry entry) {", "            return null; // everything is ok", "            return type;", "        TOGGLE_GROUPS(MaterialDesignIcon.VIEW_LIST), /*css: view-list */", "                    new LatexFieldFormatter(fieldFormatterPreferences).format(newValue, fieldName);", "        if (!result.getToAdd().isEmpty()) {", "        if (group.getGroupNode().getGroup() instanceof ExplicitGroup) {", "public class FetchAndMergeEntry {", "        return null;", "    <V> void showProgressDialogAndWait(String title, String content, Task<V> task);", "public class CreateModifyExporterDialogViewModel extends AbstractViewModel {", "            names = sortedReferenceMarks;", "    private static KeyBindingRepository keyBindingRepository;", "    public void setAutoCommit(boolean autoCommit) throws SQLException {", "            CoarseChangeFilter changeFilter = new CoarseChangeFilter(bibDatabaseContext);", "    public StyleSpans<Collection<String>> computeHighlighting(String text) {", "        XTextContent xTextContent = UnoRuntime.queryInterface(XTextContent.class, bookmark);", "public class SidePane extends BorderPane {", "    public void close() throws SQLException {", "                String[] markers = normCitMarkers[i]; // compare normalized markers, since the actual markers can be different", "                    title.append('*');", "        INTEGRITY_INFO(MaterialDesignIcon.INFORMATION), /*css: information */", "    public static SearchDescriber getSearchDescriberFor(SearchQuery searchQuery) {", "        ControlHelper.setAction(saveButton, getDialogPane(), event -> savePreferencesAndCloseDialog());", "        List<String> tmp = new ArrayList<>();", "                GroupTreeNode newNode = m_subtreeBackup.copySubtree();", "    boolean showConfirmationDialogWithOptOutAndWait(String title, String content,", "            if (bibtexResult == null) {", "            ParserResult bibtexResult = mergeImportResults(imports);", "            resetChangeMonitorAndChangePane();", "    public abstract Node description();", "    public boolean acceptableDrop(Dragboard dragboard) {", "    public static final RemoteListenerServerLifecycle REMOTE_LISTENER = new RemoteListenerServerLifecycle();", "        final PushToApplicationAction pushToApplicationAction = pushToApplicationsManager.getPushToApplicationAction();", "    public void storeSettings() {", "            prefs.clearPassword(); // for the case that the password is already set", "            new SharedDatabasePreferences(context.getDatabase().generateSharedDatabaseID())", "                if (newGroups.getGroup() instanceof AllEntriesGroup) {", "    private Optional<BibEntry> findInternalDuplicate(BibEntry entry) {", "    public void setClientInfo(String name, String value) throws SQLClientInfoException {", "            throw new ConnectionLostException(ex.getMessage());", "    public void activeReferenceChanged(ReferenceViewModel reference) {", "    private class EditAction extends SimpleCommand {", "        AUTO_FILE_LINK(MaterialDesignIcon.FILE_FIND) /*css: file-find */,", "        base.removeString(string.getId());", "        String[] cmd = (application != null) && !application.isEmpty() ? new String[] {\"/usr/bin/open\", \"-a\",", "    public <T> void putValue(Class<T> type, T value) {", "            switch (mouseLocation) {", "        XNamed xChildNamed;", "        if (dataBaseNumber >= 0) {", "                output(Localization.lang(\"Copied\") + \" '\" + JabRefDialogService.shortenDialogMessage(copiedTitles) + \"'.\");", "public enum DroppingMouseLocation {", "                SaveDatabaseAction saveAction = new SaveDatabaseAction(panel, Globals.prefs, Globals.entryTypesManager);", "        if (!text.trim().isEmpty()) { // we do not trim the value at the assignment to enable users to have spaces at the beginning and at the end of the pattern", "        button.graphicProperty().unbind();", "            dialogService.notify(Localization.lang(\"Added group \\\"%0\\\".\", group.getName()));", "        return null;", "            List<String> titles = selectedBibEntries.stream()", "                        if (!refKeys.get(marker).contains(currentKey)) {", "        m_subtreeBackup = editType != UndoableAddOrRemoveGroup.REMOVE_NODE_KEEP_CHILDREN ? editedNode.getNode()", "    public void entryEditorClosing() {", "import java.util.HashMap;", "    public void searchButtonClicked() {", "        return metaData;", "        return new Label(Localization.lang(\"Metadata change\"));", "            PreferencesMigrations.runMigrations();", "        Optional<DocumentTitleViewModel> selectedDocument = dialogService.showChoiceDialogAndWait(Localization.lang(\"Select document\"), Localization.lang(\"Found documents:\"), Localization.lang(\"Use selected document\"), viewModel);", "    public void editAbbreviation(String name, String abbreviation) {", "    private void setCurrentAbbreviationNameAndAbbreviationIfValid(String name, String abbreviation) {", "        BibEntryWriter bibtexEntryWriter = new BibEntryWriter(", "            mimeType = val[2];", "        PLAIN_TEXT_IMPORT_DONE(MaterialDesignIcon.CHECKBOX_MARKED_CIRCLE_OUTLINE) /* checkbox-marked-circle-outline */,", "                            LOGGER.debug(\"Mode LINK\"); //shift on win or no modifier", "        ChangeScanner scanner = new ChangeScanner(database, referenceFile);", "        return null;", "        if (cli.isPreferencesImport()) {", "                    dragExpansionHandler.expandGroup(row.getTreeItem());", "    public List<BasePanel> getBasePanelList() {", "    public static synchronized KeyBindingRepository getKeyPrefs() {", "        if ((directory == null) || !directory.exists() || !directory.isDirectory()) {", "    public static ProtectedTermsLoader protectedTermsLoader;", "                ArgumentProcessor argumentProcessor = new ArgumentProcessor(arguments, ArgumentProcessor.Mode.INITIAL_START);", "    public void setValues(AbstractBibtexKeyPattern keyPattern) {", "        List<String> names = getSortedReferenceMarks(nameAccess);", "    Optional<Path> showFileOpenFromArchiveDialog(Path archivePath) throws IOException;", "                    LOGGER.debug(\"Mode Copy\"); //ctrl on win, no modifier on Xubuntu", "            for (BibEntry be : bes) {", "            ParserResult pr = loaded.get(loaded.size() - 1);", "                entries.remove(entry);", "    public static JabRefPreferences prefs;", "        BLOG(MaterialDesignIcon.RSS), /* css: rss */", "            Field privatePopup = AutoCompletionBinding.class.getDeclaredField(\"autoCompletionPopup\");", "    public void updateFont() {", "", "        alert.getDialogPane().applyCss();", "                file = new URLDownload(address).toTemporaryFile();", "    public void rollback() throws SQLException {", "        return null;", "            String issueBody = systemInfo + \"\\n\\n\" + howToReproduce + \"\\n\\n\" + \"Paste your log details here.\";", "public interface DialogService {", "        return null;", "public class CopyBibTeXKeyAndLinkAction implements BaseAction {", "            if (oldValue == null) {", "            for (TextField field : textFields.values()) {", "        BackgroundTask", "            if (defaultApplicationSelectedProperty.getValue() || application.isEmpty()) {", "public enum Actions {", "        for (int i = 0; i < 6; i++) {", "        if (!validSettings()) {", "    public static void showParserResultWarningDialog(final ParserResult parserResult, final JabRefFrame jabRefFrame) {", "        return 0;", "    public List<BibEntry> getSelectedEntries() {", "            root.setGroup(changedGroups.getGroup());", "        Collection<BibEntry> bibEntries = (Collection<BibEntry>) super.complete(request);", "            String sConnect = \"uno:socket,host=localhost,port=2083\" + \";urp;StarOffice.ComponentContext\";", "        return null;", "    public static void openFolderAndSelectFile(Path fileLink) throws IOException {", "        final Timer searchTask = FxTimer.create(Duration.ofMillis(400), () -> {", "        if (!matches.isEmpty()) {", "    private class SearchAutoCompleteListener {", "            entries = frame.getCurrentBasePanel().getSelectedEntries();", "                if (basePanel.getBibDatabaseContext().getDatabaseFile().isPresent()) {", "                    return Optional.of(suffix); // return the first one we found, anyway.", "            XComponentContext xLocalContext = createInitialComponentContext((Map<String, Object>) null);", "        ExporterFactory.entryNumber = 1; // Set entry number in case that is included in the preview layout.", "                getUndoManager().addEdit(new UndoableInsertEntry(bibDatabaseContext.getDatabase(), bibEntry));", "                if (!xmpEntriesInFile.isEmpty()) {", "    Optional<Path> showDirectorySelectionDialog(DirectoryDialogConfiguration directoryDialogConfiguration);", "                List<FieldChange> changes = SpecialFieldsUtils.updateField(specialField, value, be, nullFieldIfValueIsTheSame, Globals.prefs.isKeywordSyncEnabled(), Globals.prefs.getKeywordDelimiter());", "        base.removeString(string.getId());", "        column.setCellValueFactory(cellData -> EasyBind.monadic(cellData.getValue().getField(firstField)).map(x -> firstField).orElse(EasyBind.monadic(cellData.getValue().getField(secondField)).map(x -> secondField)));", "            RemoteClient remoteClient = new RemoteClient(remotePreferences.getPort());", "            if (!Files.exists(directory)) {", "                text.set(nextAbbreviation.get());", "        boolean isModifiedLocally = (DuplicateCheck.compareEntriesStrictly(memEntry, tmpEntry) <= 1);", "        dividerPositionSubscription = EasyBind.monadic(Bindings.valueAt(splitPane.getDividers(), 0))", "            if ((!valToMove.isPresent()) || valToMove.get().isEmpty()) {", "public class OldCommandWrapper extends CommandBase {", "        final BuildInfo buildInfo = Globals.BUILD_INFO;", "public class OracleConnection implements Connection {", "        READ_STATUS_READ(Color.rgb(111, 204, 117, 1), MaterialDesignIcon.EYE), /*css: eye */", "    public ListProperty<Language> languagesListProperty() { return this.languagesListProperty; }", "            dialogService.showErrorDialogAndWait(Localization.lang(\"File not found\"), Localization.lang(\"Could not find file '%0'.\", linkedFile.getLink()));", "public class OracleStatement {", "public class WaitForSaveFinishedDialog {", "public class UnknownExternalFileType implements ExternalFileType {", "public class AutoCompletionTextInputBinding<T> extends AutoCompletionBinding<T> {", "        return null;", "                return new ContentSelectorSuggestionProvider((AutoCompleteSuggestionProvider<String>) suggestionProvider, contentSelectorValues);", "                mergedEntry.setField(field, leftEntry.getField(field).get()); // Will only happen if field exists", "        for (BibEntry entry : entries) {", "    public void notifyAboutFocus(BibEntry entry) {", "        this.inMem = inMem; // Holds the version in memory. Check if it has been modified...?", "        return null;", "                            break;", "    private final RadioButton autoGroupKeywordsOption = new RadioButton(Localization.lang(\"Generate groups from keywords in a BibTeX field\"));", "    private void setupClearButtonField(CustomTextField customTextField) {", "        SpecialFieldViewModel printedViewModel = new SpecialFieldViewModel(SpecialField.PRINTED, undoManager);", "        Button search = new Button(Localization.lang(\"Search\"));", "public class JabRefLauncher {", "        catch (IOException excep) {", "    private static Optional<ParserResult> importToOpenBase(String argument) {", "    public boolean dragDroppedInChosenCell(PreviewLayout targetLayout, Dragboard dragboard) {", "public enum BasePanelMode {", "        Map<String,Double> columnWidths = new HashMap<>();", "public class JabRefFrame extends BorderPane {", "        AUTO_GROUP(MaterialDesignIcon.AUTO_FIX), /*css: auto-fix*/", "            if (fileWriter.hasEncodingProblems()) {", "        return null;", "public @interface ApacheCommonsLang3Allowed {", "                if (!Files.isDirectory(directory)) {", "        if (searchField.getText().isEmpty()) {", "        encodingDisableProperty.setValue(isShared); // the encoding of shared database is always UTF-8", "                ExternalFileType toRemove = null;", "                return new ReadOnlyStringWrapper(\"\");", "    public UndoableAddOrRemoveGroup(GroupTreeNodeViewModel groupsRoot,", "        for (int i = 0; i < pages.getCount(); i++) {", "            correctEntries = entries;", "    public void setWindowTitle() {", "        info.setStyle(\"-fx-padding: 0.5em 0 0.5em 0;\"); // To align with buttons below which also have 0.5em padding", "        setPageWidth(desiredPageDimension.getWidth(Math.sqrt(2)) + delta);", "    public void focus() {", "    private void initialize() {", "public class TagBar<T> extends HBox {", "        m_modifiedSubtree.clear();", "    private void openFile(Path filePath) {", "        annotationList.getSelectionModel().setSelectionMode(SelectionMode.SINGLE);", "        group.getGroupNode().removeEntriesFromGroup(stateManager.getSelectedEntries());", "    }", "        return false;", "            ensureCorrectJavaVersion();", "            if (filenames.isEmpty()) {", "        PreviewPreferences previewPreferences = Globals.prefs.getPreviewPreferences();", "            String howToReproduce = \"Steps to reproduce:\\n\\n1. ...\\n2. ...\\n3. ...\";", "    public void addNewFile() {", "public class FromAuxDialog extends BaseDialog<Void> {", "    private class SearchAutoCompleteListener {", "        Path directory = file.toAbsolutePath().getParent();", "    public void about() {", "            Node tabHeaderArea = ((TabPaneSkin) this.tabbedPane.getSkin())", "    public static XComponentContext createInitialComponentContext(Map<String, Object> context_entries) throws Exception {", "                rebuildBibTextSection(allBases, style);", "    void showInformationDialogAndWait(String title, String content);", "        FILE_MULTIPLE(MaterialDesignIcon.FILE_MULTIPLE), /*css: file-multiple */", "    private void ensureNotShowingBottomPanel(BibEntry entry) {", "    private static Map<String, String> readIconThemeFile(URL url, String prefix) {", "public interface PushToApplication {", "public enum AutoCompleteFirstNameMode {", "                XFootnote footer = UnoRuntime.queryInterface(XFootnote.class, range.getText());", "        /*", "        GUIGlobals.updateEntryEditorColors();", "public class NoSelectionModel<T> extends MultipleSelectionModel<T> {", "    public void automatedImport(List<String> filenames) {", "            openExternalFilePlatformIndependent(type, link);", "            if (leftString.isPresent()) {", "                } catch (IOException | TransformerException ex) {", "                    Object context = xUrlResolver.resolve(sConnect);", "    void showErrorDialogAndWait(String title, String content);", "    public static final String FRAME_TITLE = \"JabRef\";", "        if (start > 0) {", "class JabRefAction extends org.controlsfx.control.action.Action {", "    ENTRY_EDITOR_PREVIOUS_PANEL_2(\"Entry editor, previous panel 2\", Localization.lang(\"Entry editor, previous panel 2\"), \"ctrl+MINUS\", KeyBindingCategory.VIEW),", "class UpdateTimestampListener {", "    private int replaceItem(BibEntry entry, NamedCompound compound) {", "            for (KeyBinding keyBinding : KeyBinding.values()) {", "    public <T> List<Future<T>> executeAll(Collection<Callable<T>> tasks) {", "        BindingsHelper.bindBidirectional(valueProperty(), temporalAccessorValue,", "        for (Map.Entry<EntryType, TextField> entry : textFields.entrySet()) {", "    private final List<String> columnHeadings = Arrays.asList(Localization.lang(\"Field\"),", "    private void updateMergedEntry() {", "                types[i] = type; // Remember the type in case we need to uniquefy.", "    boolean showConfirmationDialogAndWait(String title, String content, String okButtonLabel, String cancelButtonLabel);", "    private void saveExternalFilesList() {", "    public void setContent(ClipboardContent content) {", "        if (grammarBasedSearch) {", "    public String getInformation(boolean includeMissingEntries) {", "                    default:", "    public static LinkedFile fromFile(Path file, List<Path> fileDirectories, ExternalFileTypes externalFileTypesFile) {", "        List<Exporter> exporters = Globals.exportFactory.getExporters().stream()", "            Method m = TextFields.class.getDeclaredMethod(\"setupClearButtonField\", TextField.class, ObjectProperty.class);", "        this.bibDatabaseContext.getDatabase().registerListener(new GroupTreeListener());", "            System.out.println(new AuxParserResultViewModel(result).getInformation(true));", "            markingContent = markingContent.replaceAll(\"-\" + NEWLINE, \"\");", "    <T> Optional<T> showChoiceDialogAndWait(String title, String content, String okButtonLabel, T defaultChoice, Collection<T> choices);", "        private void updateTexts(UndoChangeEvent event) {", "        mainTable.addSelectionListener(event -> mainTable.getSelectedEntries()", "    public static <T> SuggestionProvider<T> create(Callback<T, String> stringConverter, Collection<T> possibleSuggestions) {", "            if ((newBase != null) && newBase.hasEntries()) {", "    private void updateColumnPreferences() {", "public class ViewModelListCellFactory<T> implements Callback<ListView<T>, ListCell<T>> {", "    SearchDisplayMode(Supplier<String> displayName, Supplier<String> toolTipText) {", "            while (preferences.get(JabRefPreferences.CUSTOM_TAB_NAME + \"_def\" + i) != null) {", "                markBaseChanged(); // The database just changed.", "        TABLE_ICONS.put(SpecialField.PRIORITY, icon);", "                for (BibEntry entry : pr.getDatabase().getEntries()) {", "            NamedCompound ce = new NamedCompound(Localization.lang(\"Merge entries\"));", "    private class SearchListener {", "            mode = Globals.prefs.getDefaultBibDatabaseMode();", "            updateAllTabTitles();", "    public BackgroundTask<V> onFinished(Runnable onFinished) {", "    public static void init() {", "        boolean citePressed = dialogService.showConfirmationDialogAndWait(Localization.lang(\"Cite\"),", "            for (Field field : jointFields) {", "            journalAbbreviationLoader.update(abbreviationsPreferences);", "        return node.children.getSource().stream().anyMatch(this::showNode);", "        return \"\";", "    public void setCatalog(String catalog) throws SQLException {", "            GroupTreeNode groupNode = group.getGroupNode();", "                    if (startupMode == Mode.INITIAL_START) {", "        Abbreviation abbreviation = journalAbbreviationRepository.getAbbreviation(text).get(); // must be here", "public class CurrentThreadTaskExecutor implements TaskExecutor {", "                        LOGGER.debug(\"Mode MOVE\");", "                continue;", "        bibTexTitlePane.managedProperty().bind(bibTexTitlePane.visibleProperty());", "            return;", "    <V> Future<V> execute(BackgroundTask<V> task);", "                this.baseChanged = true;", "        for (int i = 0; i < visibleTabs.size(); i++) {", "    public static JournalAbbreviationLoader journalAbbreviationLoader;", "    public class JournalAbbreviationsNameTableEditingCell extends TableCell<AbbreviationViewModel, String> {", "            return pathname -> true;", "class ConversionMenu extends Menu {", "            for (BibEntry be : bes) {", "    private final List<Integer> m_pathToNode;", "            LOGGER.info(\"Cannot rename string '\" + mem + \"' to '\" + disk + \"' because the name \"", "public abstract class DocumentPageViewModel {", "        warnBeforeOverwriting.setDisable(dontOverwrite.isSelected());", "                    default:", "        return null;", "    public void putBibEntries(List<BibEntry> entries) {", "            if (!Files.isDirectory(directory)) {", "                new JabRefGUI(mainStage, argumentProcessor.getParserResults(), argumentProcessor.isBlank());", "public class ExporterViewModel {", "        return null;", "        return null;", "        mainStage.showingProperty().addListener(new ChangeListener<Boolean>() {", "public class CrossrefFetcherEvaluator {", "    void storeSettings();", "    private static UndoableEdit massRenameField(Collection<BibEntry> entries, Field field, Field newField,", "    public static XMultiServiceFactory createSimpleServiceManager() throws Exception {", "        return Bindings.createBooleanBinding(() -> !source.isEmpty() && source.stream().allMatch(predicate), source);", "        List<ParserResult> loaded = importAndOpenFiles();", "    private Optional<SearchQuery> currentSearchQuery = Optional.empty();", "        textArea.setPasteActionHandler(() -> textArea.setText(new CleanupURLFormatter().format(new TrimWhitespaceFormatter().format(textArea.getText()))));", "    void showErrorDialogAndWait(String message, Throwable exception);", "        instantiateSearchAutoCompleter();", "                String changeFlag = isModified() && !isAutosaveEnabled ? \"*\" : \"\";", "            if (directory == null) { //It could be that somehow the path is null, for example if it got deleted in the meantime", "        return null;", "        String dialogTitle;", "        GlobalBibtexKeyPattern keypatterns = getKeyPatternAsGlobalBibtexKeyPattern();", "    public void setPasteActionHandler(PasteActionHandler handler) {", "        boolean emptyKeys = false;", "            StringReader sr = new StringReader(\"\\\\bibtexkey - \\\\begin{title}\\\\format[RemoveBrackets]{\\\\title}\\\\end{title}\\n\");", "            Optional<BasePanel> panel = getBasePanelList().stream()", "            tmp = Files.createTempFile(\"jabrefCb\", \".tmp\");", "    private List<Path> getFileListFromNode(CheckBoxTreeItem<FileNodeWrapper> node) {", "            BibDatabaseDiff differences = BibDatabaseDiff.compare(referenceDatabase, databaseOnDisk);", "        OPTIONAL(MaterialDesignIcon.LABEL_OUTLINE), /*css: label-outline */", "        CONNECT_OPEN_OFFICE(MaterialDesignIcon.OPEN_IN_APP) /*css: open-in-app */,", "        TABLE_ICONS.put(StandardField.URL, icon);", "    private Optional<BibEntry> entry = Optional.empty();", "        MutableLogEvent copy = new MutableLogEvent();", "    private static Object createDependency(Class<?> clazz) {", "    public void commit() throws SQLException {", "    private String getLogMessagesAsString(List<LogEventViewModel> messages) {", "        Globals.prefs.putInt(JabRefPreferences.FONT_SIZE, size);", "    private final GroupTreeNodeViewModel m_groupsRootHandle;", "    protected void handleFocus() {", "                updateSortedReferenceMarks();", "                        @SuppressWarnings(\"unchecked\")", "    protected String[] getCommandLine(String keyString) {", "        super();", "        adjustSplitter(); // restore last splitting state (before mainTable is created as creation affects the stored size of the entryEditors)", "        String searchTerm = data[0].replace(\"\\\\$\", \" \"); //enables blanks within the search term:"]