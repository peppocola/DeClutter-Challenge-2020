["    public static void showContextMenu(TextArea textArea, ContextMenu contextMenu, ContextMenuEvent e) {", "        TABLE_ICONS.put(SpecialField.PRINTED, icon);", "        BindingsHelper.bindBidirectional(valueProperty(), temporalAccessorValue,", "    private boolean confirmClose(BasePanel panel) {", "        INTEGRITY_INFO(MaterialDesignIcon.INFORMATION), /*css: information */", "                ExternalFileType toRemove = null;", "        for (Map.Entry<EntryType, TextField> entry : textFields.entrySet()) {", "        return metaData;", "            if (isLoaded(dbFile) || !dbFile.exists()) {", "        for (ParserResult pr : toOpenTab) {", "            tmp = Files.createTempFile(\"jabrefCb\", \".tmp\");", "public class DefaultFileUpdateMonitor implements Runnable, FileUpdateMonitor {", "    private final RadioButton autoGroupKeywordsOption = new RadioButton(Localization.lang(\"Generate groups from keywords in a BibTeX field\"));", "    public static <A, B> MappedList<B, A> mapBacked(ObservableList<A> source, Function<A, B> mapper) {", "    public BackgroundTask<V> onFailure(Consumer<Exception> onException) {", "            group.getGroupNode().removeAllChildren();", "                if (basePanel.getBibDatabaseContext().getDatabaseFile().isPresent()) {", "        boolean modificationsAgree = (DuplicateCheck.compareEntriesStrictly(memEntry, diskEntry) > 1);", "            return AutoCompleteFirstNameMode.BOTH;", "                if (!Files.isDirectory(directory)) {", "    void storeSettings();", "        List<String> names = getSortedReferenceMarks(nameAccess);", "        save();", "    public MergeEntries(BibEntry entryLeft, BibEntry entryRight, String headingLeft, String headingRight, BibDatabaseMode type) {", "            autoCompleter.setShowOnFocus(true);", "    public boolean dragDroppedInChosenCell(PreviewLayout targetLayout, Dragboard dragboard) {", "public class BindingsHelper {", "    public static List<Text> formatToTexts(String original, TextReplacement... replacements) {", "    public void copyLog(List<LogEventViewModel> messages) {", "                JabRefGUI.getMainFrame().getDialogService().notify(Localization.lang(\"Copied\") + \" '\" + JabRefDialogService.shortenDialogMessage(keyAndLink) + \"'.\");", "            if (identicalFields.contains(field)) {", "public class BibEntrySuggestionProvider extends SuggestionProvider<BibEntry> implements AutoCompleteSuggestionProvider<BibEntry> {", "        READ_STATUS(MaterialDesignIcon.EYE), /*css: eye */", "    public void addAbbreviation(String name, String abbreviation) {", "    private class EditAction extends SimpleCommand {", "    public ObjectBinding<T> orElse(T other) {", "public class OldDatabaseCommandWrapper extends CommandBase {", "                if (pr.getFile().filter(path -> path.getAbsolutePath().equals(focusedFile)).isPresent()) {", "abstract class FieldsEditorTab extends EntryEditorTab {", "                dups = this.duplicates.poll(100, TimeUnit.MILLISECONDS);", "    public void clearLog() {", "    public boolean setNewBinding(KeyEvent evt) {", "        base.setPreamble(oldValue);", "                        FadeTransition fadeIn = new FadeTransition(Duration.millis(100), imageView);", "        BLOG(MaterialDesignIcon.RSS), /* css: rss */", "    public static SearchDescriber getSearchDescriberFor(SearchQuery searchQuery) {", "    private int replaceItem(BibEntry entry, NamedCompound compound) {", "            field = StandardField.URL;", "    public SortedMap<KeyBinding, String> getKeyBindings() {", "        ContextMenu fetcherMenu = new ContextMenu();", "                            LOGGER.debug(\"Mode Copy\"); //ctrl on win", "    private static void addGroups(GroupTreeNode newGroups, CompoundEdit ce) {", "    public List<FieldChange> addEntriesToGroup(List<BibEntry> entries) {", "            return false;", "        return GroupHierarchyType.INDEPENDENT; // default", "            String issueBody = systemInfo + \"\\n\\n\" + howToReproduce + \"\\n\\n\" + \"Paste your log details here.\";", "    protected void handleFocus() {", "        if (end < line.length()) {", "    private static ExternalFileTypes singleton;", "public class CustomLocalDragboard {", "    public void importButtonClicked() {", "public class FromAuxDialog extends BaseDialog<Void> {", "    public static void showParserResultWarningDialog(final ParserResult parserResult, final JabRefFrame jabRefFrame,", "                int[] permutation = new int[to - from];", "        PseudoClass rootPseudoClass = PseudoClass.getPseudoClass(\"root\");", "        } catch (MalformedURLException e) {", "            entries = frame.getCurrentBasePanel().getSelectedEntries();", "        int row = 2;", "    public void putPreviewLayouts(List<PreviewLayout> previewLayouts) {", "                entries.remove(entry);", "        other = findInternalDuplicate(entry);", "            if (result == DuplicateResolverDialog.DuplicateResolverResult.KEEP_LEFT) {", "    public Image render(int width, int height) {", "            if (REMOTE_LINK_PATTERN.matcher(link).matches()) {", "        List<Exporter> exporters = Globals.exportFactory.getExporters().stream()", "            new SharedDatabasePreferences(context.getDatabase().generateSharedDatabaseID())", "        Globals.protectedTermsLoader = new ProtectedTermsLoader(Globals.prefs.getProtectedTermsPreferences());", "    private static Label getAssociatedNode(MenuItem menuItem) {", "        super();", "    private void setCurrentAbbreviationNameAndAbbreviationIfValid(String name, String abbreviation) {", "            int maxAuthorsFirst = style.getIntCitProperty(OOBibStyle.MAX_AUTHORS_FIRST);", "        textFlow.getChildren().add(TooltipTextUtil.createText(String.format(\"%s \", Localization.lang(\"This search contains entries in which\")), TooltipTextUtil.TextType.NORMAL));", "            entries.removeIf(BibEntry::hasCiteKey);", "    void performAction(BasePanel panel, ParserResult pr);", "    private CheckBoxTreeItem<FileNodeWrapper> searchDirectory(File directory, UnlinkedPDFFileFilter ff) {", "    private void addLinkedFileFromURL(URL url, BibEntry entry, Path targetDirectory) {", "        textArea.setPasteActionHandler(() -> textArea.setText(new CleanupURLFormatter().format(new TrimWhitespaceFormatter().format(textArea.getText()))));", "        public SuggestionProviderString(Callback<T, String> stringConverter) {", "        xChildNamed.setName(OOBibBase.BIB_SECTION_NAME);", "            ParserResult bibtexResult = mergeImportResults(imports);", "                panel.runCommand(Actions.SAVE);", "    public void addNewFile() {", "                .ifPresent(newGroups::moveTo);", "        if (!newerVersion.isPresent() || (newerVersion.get().equals(toBeIgnored) && !manualExecution)) {", "        double matchWithTmp = DuplicateCheck.compareEntriesStrictly(memEntry, tmpEntry);", "        if (!xNamedBookmarks.hasByName(name)) {", "        if (!validSettings()) {", "                    break;", "        CONNECT_OPEN_OFFICE(MaterialDesignIcon.OPEN_IN_APP) /*css: open-in-app */,", "    public void setValues(AbstractBibtexKeyPattern keyPattern) {", "    public static <T> SuggestionProvider<T> create(Collection<T> possibleSuggestions) {", "            if (!Files.exists(directory)) {", "        ATTACH_FILE(MaterialDesignIcon.PAPERCLIP) /*css: paperclip*/,", "    protected static ClipboardContent processRtf(List<String> citations) {", "        final PushToApplicationAction pushToApplicationAction = pushToApplicationsManager.getPushToApplicationAction();", "    public static List<MenuItem> getDefaultContextMenuItems(TextInputControl textInputControl) {", "            mode = Globals.prefs.getDefaultBibDatabaseMode();", "    SearchDisplayMode(Supplier<String> displayName, Supplier<String> toolTipText) {", "        if (grammarBasedSearch) {", "                cursor.collapseToEnd();", "        CleanupWorker cleaner = new CleanupWorker(panel.getBibDatabaseContext(), preferences.getCleanupPreferences(", "                if (toRemove != null) {", "    private class InputMethodRequestsObject implements InputMethodRequests {", "public class UndoablePreambleChange extends AbstractUndoableJabRefEdit {", "            ImportFormatPreferences importFormatPreferences = Globals.prefs.getImportFormatPreferences();", "            ProgressIndicator progress = new ProgressIndicator();", "            ensureCorrectJavaVersion();", "    public String getIconName() {", "                    toOpenTab.add(pr);", "            return;", "        if (!text.trim().isEmpty()) { // we do not trim the value at the assignment to enable users to have spaces at the beginning and at the end of the pattern", "        String pairs[] = null;", "        List<Formatter> caseChangers = new ArrayList<>();", "        List<ImportFormatReader.UnknownFormatImport> imports = new ArrayList<>();", "public class ViewModelListCellFactory<T> implements Callback<ListView<T>, ListCell<T>> {", "        return changes;", "                    } catch (KeyCollisionException e) {", "public class WaitForSaveFinishedDialog {", "            basePanel.closeBottomPane();", "                Globals.REMOTE_LISTENER.openAndStart(new JabRefMessageHandler(), remotePreferences.getPort());", "public class PersistenceVisualStateTable {", "        encodingDisableProperty.setValue(isShared); // the encoding of shared database is always UTF-8", "                command = command.replace(\"%DIR\", absolutePath);", "                if (!cssUri.toString().contains(\"jar\")) {", "                        LOGGER.debug(\"Mode LINK\");", "        if (command instanceof SimpleCommand) {", "    public class JournalAbbreviationsNameTableEditingCell extends TableCell<AbbreviationViewModel, String> {", "                    return Optional.of(suffix); // return the first one we found, anyway.", "                        if (keywordGroupRegExp.isSelected()) {", "    private GroupHierarchyType getContext() {", "        group.getGroupNode().removeEntriesFromGroup(stateManager.getSelectedEntries());", "        flow.estimatedScrollYProperty().addListener((observable, oldValue, newValue) -> scrollY.setValue(newValue));", "    private void initialize() {", "interface PreferencesTab {", "    void pushEntries(BibDatabaseContext database, List<BibEntry> entries, String keyString);", "                        ExplicitGroup group = new ExplicitGroup(\"Imported\", GroupHierarchyType.INDEPENDENT,", "public class MassSetFieldsAction extends SimpleCommand {", "            root.setSelected(false);", "                    LOGGER.debug(\"Mode Copy\"); //ctrl on win, no modifier on Xubuntu", "                mustTestCharFormat = false; // need to do this only once", "                    Bounds anchorBounds = row.getBoundsInParent();", "    public static void openConsole(File file) throws IOException {", "            root.setGroup(DefaultGroupsFactory.getAllEntriesGroup());", "    public boolean quit() {", "        currentResults.setPrefWidth(150);", "public abstract class MapBasedEditorViewModel<T> extends OptionEditorViewModel<T> {", "        setWrapText(true);", "public class PersonNameSuggestionProvider extends SuggestionProvider<Author> implements AutoCompleteSuggestionProvider<Author> {", "    public StyleSpans<Collection<String>> computeHighlighting(String text) {", "    public void setValues() {", "                        LOGGER.debug(\"Mode MOVE\");", "        Map<String,Double> columnWidths = new HashMap<>();", "    private void addImportedEntries(final BasePanel panel, final List<BibEntry> entries) {", "            journalAbbreviationLoader.update(abbreviationsPreferences);", "        String dialogTitle;", "class JabRefAction extends org.controlsfx.control.action.Action {", "    public BooleanProperty useFileBrowserDefaultProperty() { return this.useFileBrowserDefaultProperty; }", "        resolveStringsAllProperty.setValue(preferences.getBoolean(JabRefPreferences.RESOLVE_STRINGS_ALL_FIELDS)); // Flipped around", "        FILE_MULTIPLE(MaterialDesignIcon.FILE_MULTIPLE), /*css: file-multiple */", "            String sOffice = System.getProperty(\"os.name\").startsWith(\"Windows\") ? \"soffice.exe\" : \"soffice\";", "            BasePanel panel = getCurrentBasePanel();", "        RELEVANCE(MaterialDesignIcon.STAR_CIRCLE), /*css: star-circle */", "            background = new Rectangle(getDesiredWidth(), getDesiredHeight());", "    protected abstract void initParameters();", "    private final GroupTreeNodeViewModel m_groupsRootHandle;", "    private void onDatabaseChanged(ListChangeListener.Change<? extends BibEntry> change) {", "            for (int i = 0;; ++i) {", "        boolean mustTestCharFormat = style.isFormatCitations();", "        MOVE_TAB_ARROW(MaterialDesignIcon.ARROW_UP_BOLD), /*css:  arrow-up-bold */", "            Field privateStringField = TableView.class.getDeclaredField(\"contentWidth\");", "    private TableColumn<BibEntryTableViewModel, Field> createUrlOrDoiColumn(JabRefIcon icon, Field firstField, Field secondField) {", "    protected abstract Comparator<T> getComparator();", "        boolean emptyKeys = false;", "        text = viewModel.userSpecificFileDirectoryProperty().getValue();", "                    LOGGER.debug(\"Node LINK\"); //alt on win", "public abstract class DocumentPageViewModel {", "class ConversionMenu extends Menu {", "            refresh();", "            if (!file.isPresent()) {", "    public String getInformation(boolean includeMissingEntries) {", "    public void saveJournalAbbreviationFiles() {", "    public BackgroundTask<V> onSuccess(Consumer<V> onSuccess) {", "package org.jabref.gui.autocompleter;", "            URL searchURL = new URL(url);", "    private void updateView() {", "public class UndoableFieldChange extends AbstractUndoableJabRefEdit {", "public abstract class AbstractPushToApplication implements PushToApplication {", "                throw new IllegalStateException(parserResult.getErrorMessage());", "public class OldCommandWrapper extends CommandBase {", "    public static Supplier<List<MenuItem>> getCleanupURLMenu(TextArea textArea) {", "        column.setCellValueFactory(cellData -> EasyBind.monadic(cellData.getValue().getField(firstField)).map(x -> firstField).orElse(EasyBind.monadic(cellData.getValue().getField(secondField)).map(x -> secondField)));", "            if (OS.OS_X) {", "            return Collections.emptyList();", "    public boolean isExternalFileTypeByExt(String extension) {", "            return false; // unknown, cannot un/abbreviate anything", "", "            if (newValue == null) {", "            Node tabHeaderArea = ((TabPaneSkin) this.tabbedPane.getSkin())", "            for (TextField field : textFields.values()) {", "public class OptionalObjectProperty<T> extends SimpleObjectProperty<Optional<T>> {", "    public static void showContextMenu(TextField textField, ContextMenu contextMenu, ContextMenuEvent e) {", "        EXPORT_TO_CLIPBOARD(MaterialDesignIcon.CLIPBOARD_ARROW_LEFT) /*css: clipboard-arrow-left */,", "public class JabRefDesktop {", "    public <T> Future<T> execute(Callable<T> command) {", "                        JabRefGUI.getMainFrame().addParserResult(pr, focusPanel)", "                    tabbedPane.getTabs().get(i).setText(getBasePanelAt(i).getTabTitle());", "        if (application.requiresBibtexKeys()) {", "    public boolean isResolved(BibEntry entry) {", "    public void openPdfWithParameters(String filePath, List<String> parameters) throws IOException {", "            for (KeyBinding keyBinding : KeyBinding.values()) {", "    private void updateColumnPreferences() {", "            GroupTreeNode groupNode = group.getGroupNode();", "    public void createFileObjects() {", "        if (Globals.prefs.getBoolean(JabRefPreferences.FX_FONT_RENDERING_TWEAK)) {", "    public static void runAndWaitInJavaFXThread(Runnable action) {", "public class JabRefMain extends Application {", "    public static final XComponentContext bootstrap(String[] argArray, URLClassLoader loader) throws BootstrapException {", "    }", "        Optional<Path> fileDir = databaseContext.getFirstExistingFileDir(filePreferences);", "                        LOGGER.debug(\"Mode COPY\");", "        String cmd = \"xdg-open \" + filePath.toAbsolutePath().getParent().toString(); //default command", "    private void updateAfterPreferenceChanges() {", "    public boolean equals(Object object) {", "        ButtonType replaceEntries = new ButtonType(Localization.lang(\"Merge entries\"), ButtonBar.ButtonData.OK_DONE);", "    public BooleanProperty markTimestampProperty() { return this.markTimestampProperty; }", "public class UiThreadObservableList<E> implements ObservableList<E> {", "    public <T> List<Future<T>> executeAll(Collection<Callable<T>> tasks) {", "    public void selectLastJournalFile() {", "    public void deleteAbbreviation() {", "            names = sortedReferenceMarks;", "    public static <T> ObservableList<T> forUI(ObservableList<T> list) {", "        stopRemoteThread();", "                if (!xmpEntriesInFile.isEmpty()) {", "        base.removeString(string.getId());", "        for (ExternalFileType type : unchanged) {", "    public boolean validSettings() {", "        for (int i = 0; i < visibleTabs.size(); i++) {", "            updateAllTabTitles();", "public class ActionFactory {", "public class FetchAndMergeEntry {", "        if (newGroups.getGroup() instanceof AllEntriesGroup) {", "        Button search = new Button(Localization.lang(\"Search\"));", "            tableView.addEventHandler(KeyEvent.KEY_RELEASED, event -> {", "    public static <V> V runInJavaFXThread(Callable<V> callable) {", "            fields.add(InternalField.KEY_FIELD);", "        List<String> tmp = new ArrayList<>();", "        Map<BibEntry, BibDatabase> entries = findCitedEntries(databases, cited, linkSourceBase); // Although entries are redefined without use, this also updates linkSourceBase", "            for (BibEntry entry : entries) {", "public class DefaultTaskExecutor implements TaskExecutor {", "            if (event.getCode() == KeyCode.ENTER) {", "                            refKeys.get(marker).add(currentKey);", "                if (toRemove != null) {", "public class JabRefFrame extends BorderPane {", "            base.addString(string);", "public class DetectOpenOfficeInstallation {", "            currentPage.set(", "        setPageWidth(desiredPageDimension.getWidth(Math.sqrt(2)) + delta);", "        List<BibEntry> selectedEntries = basePanel.getSelectedEntries();", "public class ManageJournalAbbreviationsView extends BaseDialog<Void> {", "            Optional<BasePanel> panel = getBasePanelList().stream()", "public class UndoableChangeType extends AbstractUndoableJabRefEdit {", "    public BooleanProperty openLastStartupProperty() { return openLastStartupProperty; }", "    public void setWindowTitle() {", "        if (panel != null) {", "            this.moveTo(target);", "        BibEntryWriter bibtexEntryWriter = new BibEntryWriter(", "    public void openFiles(List<Path> filesToOpen, boolean raisePanel) {", "        if (preferences.isMrdlibAccepted()) {", "        String extensionString = exporter.getFileType().getExtensions().get(0);", "    private final List<Integer> m_pathToNode;", "            mimeType = \"\";", "import java.util.HashMap;", "            if (defaultApplicationSelectedProperty.getValue() || application.isEmpty()) {", "    private List<Path> getFileListFromNode(CheckBoxTreeItem<FileNodeWrapper> node) {", "        ADD_ROW(MaterialDesignIcon.SERVER_PLUS) /* css: server-plus*/,", "    public String getConstant() {", "public class CopyDoiUrlAction extends SimpleCommand {", "        TypedBibEntry typedEntry = new TypedBibEntry(entry, databaseContext.getMode());", "                        for (int j = 0; j < cEntries.length; j++) {", "    <V> Future<V> execute(BackgroundTask<V> task);", "                        LOGGER.debug(\"Mode LINK\");", "    private void doCleanup(CleanupPreset preset, BibEntry entry, NamedCompound ce) {", "        for (int i = 0; i < tabbedPane.getTabs().size(); i++) {", "    private void updateExternalFileTypes() {", "    public void notifyAboutFocus(BibEntry entry) {", "                            break;", "            dialogService.showErrorDialogAndWait(Localization.lang(\"File not found\"), Localization.lang(\"Could not find file '%0'.\", linkedFile.getLink()));", "    public void editGroup(GroupNodeViewModel oldGroup) {", "        Path directory = file.toAbsolutePath().getParent();", "    public List<String> parseRefMarkName(String name) {", "                this.draggedItem.setExpanded(this.draggedItem.isExpanded());", "            if (!this.getChildren().contains(moreLink)) {", "            BibDatabaseDiff differences = BibDatabaseDiff.compare(referenceDatabase, databaseOnDisk);", "            root.setGroup(changedGroups.getGroup());", "            mimeType = val[2];", "            for (BibDatabase loopDatabase : databases) {", "                entries.add(diag.getMergedEntry());", "                List<FieldChange> changes = SpecialFieldsUtils.updateField(specialField, value, be, nullFieldIfValueIsTheSame, Globals.prefs.isKeywordSyncEnabled(), Globals.prefs.getKeywordDelimiter());", "        m_subtreeBackup = editType != UndoableAddOrRemoveGroup.REMOVE_NODE_KEEP_CHILDREN ? editedNode.getNode()", "    protected static ClipboardContent processHtml(List<String> citations) {", "                                LinkedFileViewModel linkedFileViewModel = new LinkedFileViewModel(linkedFiles.get(0), entry.getEntry(), database, Globals.TASK_EXECUTOR, dialogService, Globals.prefs.getXMPPreferences(), Globals.prefs.getFilePreferences(), externalFileTypes);", "                new JabRefGUI(mainStage, argumentProcessor.getParserResults(), argumentProcessor.isBlank());", "        public void dispose() {", "        for (int i = 0; (i < bibDatabases.size()) && (i < mainFrame.getBasePanelCount()); i++) {", "    public ZipFileChooser(FileSystem zipFile) throws IOException {", "                    dragExpansionHandler.expandGroup(row.getTreeItem());", "                        factory.createMenuItem(StandardActions.MERGE_DATABASE, new OldDatabaseCommandWrapper(Actions.MERGE_DATABASE, this, stateManager)), // TODO: merge with import", "        FIND_DUPLICATES(MaterialDesignIcon.CODE_EQUAL), /*css: code-equal */", "        List<BibEntry> entriesToAdd = Globals.clipboardManager.extractData();", "        XTextContent xChildSection = UnoRuntime.queryInterface(XTextContent.class, xChildNamed);", "    public void setProgressBarVisible(final boolean visible) {", "    private static String pathToClass(String basePath, Path path) {", "        ClipboardContent content = new ClipboardContent();", "        boolean maskText = (textInputControl instanceof PasswordField); // (maskText(\"A\") != \"A\");", "            String[] split = file.get().getFileName().toString().split(\"\\\\.\");", "public interface GUIPostOpenAction {", "        warnBeforeOverwriting.setDisable(dontOverwrite.isSelected());", "public final class ApplicationInsightsLogEvent extends ApplicationInsightsEvent {", "        xSet.insert(xImpLoader.activate(\"com.sun.star.comp.connections.Connector\", null, null, null));", "        return JabRefIcons.GROUP_INTERSECTION.getGraphicNode();", "        boolean first = false;", "public abstract class SuggestionProvider<T> implements Callback<ISuggestionRequest, Collection<T>> {", "    private Optional<Version> getNewVersion() throws IOException {", "    private void showConnectionError(Exception exception, boolean manualExecution) {", "        FILE_POWERPOINT(MaterialDesignIcon.FILE_POWERPOINT), /*css: file-powerpoint */", "    private static final String GOOGLE_SEARCH_EXP = \"^https?://(?:www\\\\.)?google\\\\.[\\\\.a-z]+?/url.*\";", "            keywords.removeAll(keywordsToRemove);", "        AUTO_GROUP(MaterialDesignIcon.AUTO_FIX), /*css: auto-fix*/", "    public static final XComponentContext defaultBootstrap_InitialComponentContext(String ini_file, Map<String, String> bootstrap_parameters) throws Exception {", "        TWITTER(MaterialDesignIcon.TWITTER), /* css: twitter */", "            row.setOnDragDetected(event -> {", "        ChangeScanner scanner = new ChangeScanner(database, referenceFile);", "    private static UndoableEdit massAppendField(Collection<BibEntry> entries, Field field, String textToAppend) {", "                Method getLabel = ContextMenuContent.MenuItemContainer.class.getDeclaredMethod(\"getLabel\");", "        if (changed) {", "        String focusedFile = bibDatabases.stream()", "    public boolean acceptableDrop(Dragboard dragboard) {", "            BibtexString bs = new BibtexString(label, disk);", "    private ScrollPane getPrivacyDialog(BibEntry entry) {", "            if (leftString.isPresent()) {", "    private void initialize() {", "        ContextMenu typeMenu = new ChangeEntryTypeMenu().getChangeEntryTypePopupMenu(entry, databaseContext, undoManager);", "    private ObjectProperty<IconTheme.JabRefIcons> glyph;", "        CONNECT_DB(MaterialDesignIcon.CLOUD_UPLOAD), /*cloud-upload*/", "    public static final int REMOVE_NODE_AND_CHILDREN = 2;", "public class VersionWorker {", "                        if (!resultDatabase.getEntryByKey(crossref).isPresent()) {", "                rebuildBibTextSection(allBases, style);", "    public JabRefAction(Action action, Command command, KeyBindingRepository keyBindingRepository, Sources source) {", "public class SaveDatabaseAction {", "    public static Supplier<List<MenuItem>> getDefaultMenu(final TextInputControl textInput) {", "        for (int i = 0; i < 6; i++) {", "    List<String> getRestartWarnings();", "    private AutoCompletionTextInputBinding(final TextInputControl textInputControl,", "                        return Date.parse(string).map(Date::toTemporalAccessor).orElse(null);", "        Optional<DocumentTitleViewModel> selectedDocument = dialogService.showChoiceDialogAndWait(Localization.lang(\"Select document\"), Localization.lang(\"Found documents:\"), Localization.lang(\"Use selected document\"), viewModel);", "    private static BufferedImage resize(BufferedImage img, int newWidth, int newHeight) {", "        fileChoice.itemsProperty().addListener(", "    protected String[] getCommandLine(String keyString) {", "    private static void setGraphic(MenuItem node, Action action) {", "            if (InternalField.TYPE_HEADER.equals(field) || InternalField.OBSOLETE_TYPE_HEADER.equals(field)", "    public static final int REMOVE_NODE_KEEP_CHILDREN = 1;", "package org.jabref.gui.autocompleter;", "        updateA.accept(propertyB.getValue());", "    private final Set<ExternalFileType> externalFileTypes = new TreeSet<>(Comparator.comparing(ExternalFileType::getName));", "    private void setupClearButtonField(CustomTextField customTextField) {", "            return true;", "                if (remoteClient.sendCommandLineArguments(args)) {", "                ArgumentProcessor argumentProcessor = new ArgumentProcessor(arguments, ArgumentProcessor.Mode.INITIAL_START);", "            while (preferences.get(JabRefPreferences.CUSTOM_TAB_NAME + \"_def\" + i) != null) {", "                BackgroundTask.wrap(() -> openIt(file, dialog.importEntries(), dialog.importStrings(), dialog.importGroups(), dialog.importSelectorWords()))", "            if (directory == null) { //It could be that somehow the path is null, for example if it got deleted in the meantime", "            String[] pairs = query.split(\"&\");", "        for (BibEntry entry : entries) {", "            dialogService.notify(Localization.lang(\"Modified group \\\"%0\\\".\", group.getName()));", "    public void newFile(Path file) {", "public class CreateModifyExporterDialogViewModel extends AbstractViewModel {", "            throw new ConnectionLostException(ex.getMessage());", "        OPTIONAL(MaterialDesignIcon.LABEL_OUTLINE), /*css: label-outline */", "public class SmartConstrainedResizePolicy implements Callback<TableView.ResizeFeatures, Boolean> {", "        Collection<BibEntry> bibEntries = (Collection<BibEntry>) super.complete(request);", "    public void putBibEntries(List<BibEntry> entries) {", "public class OldCommandWrapperForActiveDatabase extends CommandBase {", "            }, 60000); // run in one minute", "            Map<String, List<String>> refKeys = new HashMap<>();", "        while (componentEnumeration.hasMoreElements()) {", "                } catch (IOException | TransformerException ex) {", "            result = OpenDatabase.loadDatabase(diskdb.toAbsolutePath().toString(), importFormatPreferences, Globals.getFileUpdateMonitor());", "public class AutoCompletionTextInputBinding<T> extends AutoCompletionBinding<T> {", "    public static LinkedFile fromFile(Path file, List<Path> fileDirectories, ExternalFileTypes externalFileTypesFile) {", "    public static <T> SuggestionProvider<T> create(Callback<T, String> stringConverter, Collection<T> possibleSuggestions) {", "                entries.remove(entry);", "    public void updateFont() {", "class UpdateTimestampListener {", "            visibleComponents.add(component);", "                        throw new UndefinedCharacterFormatException(charStyle);", "public class CurrentThreadTaskExecutor implements TaskExecutor {", "            openExternalFilePlatformIndependent(type, link);", "    private class DocumentViewerPage implements Cell<DocumentPageViewModel, StackPane> {", "    private static UndoableEdit massSetField(Collection<BibEntry> entries, Field field, String textToSet,", "            xViewCursor.gotoRange(position, false);", "public class PreviewViewer extends ScrollPane implements InvalidationListener {", "                    return true;", "        LocalDate date = dateTime.query(TemporalQueries.localDate());", "        for (int i = 0; i < pages.getCount(); i++) {", "        String[][] vals = StringUtil", "            Process p = Runtime.getRuntime().exec(cmdArray);", "            List<Path> files = entry.getFiles().stream()", "    void setValues();", "            PreferencesMigrations.runMigrations();", "public class ValueTableCellFactory<S, T> implements Callback<TableColumn<S, T>, TableCell<S, T>> {", "        prefs.putKeyPattern(keypatterns);", "    private final GroupTreeNode m_groupRoot;", "public final class MappedList<A, B> extends TransformationList<A, B> {", "        List<EntryEditorTab> toBeRemoved = tabs.stream().filter(tab -> !tab.shouldShow(entry)).collect(Collectors.toList());", "        cleanupEnabled.selectedProperty().addListener(new EnablementStatusListener<>(fieldFormatterCleanups.isEnabled()));", "                            LOGGER.debug(\"Mode LINK\"); //shift on win or no modifier", "                this.dragStarted = System.currentTimeMillis();", "                SaveDatabaseAction saveAction = new SaveDatabaseAction(panel, Globals.prefs, Globals.entryTypesManager);", "            String filePath = file.get().toString();", "    Path getApplicationDirectory();", "public class ConnectToSharedDatabaseCommand extends SimpleCommand {", "            if (query == null) {", "    void addBuiltInLists() {", "                    if (decode.matches(URL_EXP)) {", "        List<EntryEditorTab> toBeRemoved = tabs.stream().filter(tab -> !tab.shouldShow(entry)).collect(Collectors.toList());", "                    event.consume();", "        INTEGRITY_FAIL(Color.RED, MaterialDesignIcon.CLOSE_CIRCLE), /*css: close-circle */", "public class UnknownExternalFileType implements ExternalFileType {", "                    if (i == 600) {", "    public static TextFormatter<String> getIntegerTextFormatter() {", "    public static String formatName(final String nameToFormat) {", "        TOGGLE_GROUPS(MaterialDesignIcon.VIEW_LIST), /*css: view-list */", "                        if (!refKeys.get(marker).contains(currentKey)) {", "        List<Future<Boolean>> futures = JabRefExecutorService.INSTANCE.executeAll(tasks);", "public class BackupUIManager {", "    public void shutdown() {", "    private static final int WARNING_LIMIT = 5;", "class NoDocumentException extends Exception {", "            String[] cmdArray = new String[argArray.length + 2];", "            BackgroundTask<Image> generateImage = BackgroundTask", "    private boolean isExistURLorDOI(List<BibEntry> selectEntryList) {", "public class UiThreadStringProperty extends StringProperty {", "        if (prefs.getBoolean(JabRefPreferences.OPEN_LAST_EDITED)) {", "public class ManageProtectedTermsDialog extends BaseDialog<Void> {", "        if ((commandPath == null) || commandPath.trim().isEmpty()) {", "                mergedEntry.setField(field, leftEntry.getField(field).get()); // Will only happen if field exists", "        MutableLogEvent copy = new MutableLogEvent();", "                Object[] permutedPart = new Object[to - from];", "        return Bindings.createBooleanBinding(() -> !source.isEmpty() && source.stream().allMatch(predicate), source);", "            if ((!valToMove.isPresent()) || valToMove.get().isEmpty()) {", "        Globals.prefs.put(JabRefPreferences.DEFAULT_BIBTEX_KEY_PATTERN, defaultPat.getText());", "    public void activeReferenceChanged(ReferenceViewModel reference) {", "            selectDocument.setDisable(false);", "        ContextMenu menu = new ContextMenu();", "    private final TextField nameField = new TextField();", "                        @SuppressWarnings(\"unchecked\")", "    public static void openBrowser(String url) throws IOException {", "    public MergeEntries(BibEntry entryLeft, BibEntry entryRight, BibDatabaseMode type) {", "        DecorationPane root = new DecorationPane();", "        READ_STATUS_READ(Color.rgb(111, 204, 117, 1), MaterialDesignIcon.EYE), /*css: eye */", "        if (selectedKeyBinding.isNull().get()) {", "    public String getDisplayText() {", "            if (!Files.isDirectory(directory)) {", "    private void setupKeyBindings() {", "    public static XMultiServiceFactory createSimpleServiceManager() throws Exception {", "                range = footer.getAnchor();", "            lp = new File(commandPath + \".in\");", "            cache.remove(entry);", "        button.graphicProperty().unbind();", "        groupTree.getSelectionModel().setSelectionMode(SelectionMode.MULTIPLE);", "            preferences.setWorkingDir(path);", "        this.executorService.shutdown();", "    private void applyPreferences() {", "class CreationException extends Exception {", "    public BooleanProperty autosaveLocalLibrariesProperty() { return autosaveLocalLibraries; }", "    public void setProgressBarIndeterminate(final boolean value) {", "                dialogService.notify(Localization.lang(\"Unable to save library\"));", "            for (Field field : originalFields) {", "        if (start > 0) {", "            EntryType oldType = originalEntry.getType();", "        int tabNumber = 0;", "    public void setIconName(String name) {", "        if (specialField == SpecialField.READ_STATUS) {", "    public AbbreviationsFileViewModel(List<AbbreviationViewModel> abbreviations, String name) {", "            Method m = TextFields.class.getDeclaredMethod(\"setupClearButtonField\", TextField.class, ObjectProperty.class);", "                ExternalFileType type = CustomExternalFileType.buildFromArgs(val);", "                updateSortedReferenceMarks();", "    public static void openExternalViewer(BibDatabaseContext databaseContext, String initialLink, Field initialField)", "    public ListProperty<Language> languagesListProperty() { return this.languagesListProperty; }", "    private void populateTable() {", "            stringBuilder.append(txt, piv, ind); // Text leading up to s1", "                                                                                   new MergeReviewIntoCommentAction(),", "        return new Label(Localization.lang(\"Metadata change\"));", "public enum Actions {", "        VBox container = new VBox();", "        boolean italicize = style.getBooleanCitProperty(OOBibStyle.ITALIC_ET_AL);", "            dialogService.showInformationDialogAndWait(", "    public abstract void makeChange(BibDatabaseContext database, NamedCompound undoEdit);", "        BindingsHelper.bindContentBidirectional(", "            RemoteClient remoteClient = new RemoteClient(remotePreferences.getPort());", "        FILE_EXCEL(MaterialDesignIcon.FILE_EXCEL), /*css: file-excel */", "    public static void openBrowserShowPopup(String url) {", "    public BackgroundTask<V> onFinished(Runnable onFinished) {", "public class TagBar<T> extends HBox {", "    private void saveExternalFilesList() {", "        TABLE_ICONS.put(StandardField.URL, icon);", "        if (searchField.getText().isEmpty()) {", "        SpecialFieldViewModel priorityViewModel = new SpecialFieldViewModel(SpecialField.PRIORITY, undoManager);", "        PLAIN_TEXT_IMPORT_DONE(MaterialDesignIcon.CHECKBOX_MARKED_CIRCLE_OUTLINE) /* checkbox-marked-circle-outline */,", "    public BasePanel getCurrentBasePanel() {", "            BibtexKeyPatternPreferences prefs = jabRefPreferences.getBibtexKeyPatternPreferences();", "public class IconValidationDecorator extends GraphicValidationDecoration {", "    public abstract Node description();", "        if (group.getGroupNode().getGroup() instanceof ExplicitGroup) {", "        return node.children.getSource().stream().anyMatch(this::showNode);", "        if (!toAdd.isEmpty()) {", "            return icon.getGraphicNode();", "            if (!overwriteKeys) {", "                text.set(nextAbbreviation.get());", "    public static void showParserResultWarningDialog(final ParserResult parserResult, final JabRefFrame jabRefFrame) {", "    private <T> AutoCompletePopup<T> getPopup(AutoCompletionBinding<T> autoCompletionBinding) {", "            URL url = new URL(link);", "        Globals.prefs.put(JabRefPreferences.LAST_USED_EXPORT, exporter.getName());", "        XNamed xChildNamed;", "public class Tag<T> extends HBox {", "        group.getGroupNode().addEntriesToGroup(stateManager.getSelectedEntries());", "            dialogService.notify(Localization.lang(\"Added group \\\"%0\\\".\", group.getName()));", "public class CopyBibTeXKeyAndLinkAction implements BaseAction {", "        for (ExternalFileType fileType : ExternalFileTypes.getDefaultExternalFileTypes()) {", "        File lp = new File(commandPath); // this needs to fixed because it gives \"asdf\" when going prefs.get(\"lyxpipe\")", "    private String getLogMessagesAsString(List<LogEventViewModel> messages) {", "    public <T> BackgroundTask<T> then(Function<V, BackgroundTask<T>> nextTaskFactory) {", "    public void addNewSubgroup(GroupNodeViewModel parent) {", "        return \"\";", "        final NamedCompound compound = new NamedCompound(Localization.lang(\"Autogenerate BibTeX keys\"));", "        String text = defaultPat.getText();", "    public AppearancePrefsTab(DialogService dialogService, JabRefPreferences prefs) {", "                GroupTreeNode removedNode = cursor", "    public void clearSuggestions() {", "        entries = basePanel.getSelectedEntries();", "    public void saveEverythingAndUpdateAutoCompleter() {", "                result.getDatabaseContext().clearDatabaseFile(); // do not open the original file", "    private static BibEntry bestFit(BibEntry targetEntry, List<BibEntry> entries) {", "                    break;", "    protected final TextField defaultPat = new TextField();", "        Optional<DocumentViewerPage> inMiddleOfViewport = Optional.empty();", "    protected String getCommandName() {", "        final BuildInfo buildInfo = Globals.BUILD_INFO;", "        protected boolean isMatch(T suggestion, ISuggestionRequest request) {", "                        LOGGER.debug(\"Mode LINK\");", "        VBox contextPanel = new VBox(10);", "                String[] markers = normCitMarkers[i]; // compare normalized markers, since the actual markers can be different", "            BibEntry firstEntry = entries.get(0);", "        btnConnect.disableProperty().bind(viewModel.formValidation().validProperty().not());", "            return null; // everything is ok", "            ExternalFileType found = null;", "        mainStage.showingProperty().addListener(new ChangeListener<Boolean>() {", "        BackgroundTask", "                    defTypes.remove(found);", "            return;", "        m_modifiedSubtree.clear();", "    public void toggle(SidePaneType type) {", "    public interface PasteActionHandler {", "        TABLE_ICONS.put(StandardField.PDF, icon);", "        List<ExternalFileType> types = new ArrayList<>(getDefaultExternalFileTypes());", "            LOGGER.info(\"Cannot rename string '\" + mem + \"' to '\" + disk + \"' because the name \"", "    public Optional<ExternalFileType> getExternalFileTypeByName(String name) {", "        database.getDatabase().insertEntries(entries);", "public class NewSubLibraryAction extends SimpleCommand {", "    private void startSearch() {", "    public boolean isGeneratedNameSameAsOriginal() {", "                    fieldChanges.add(new FieldChangeViewModel(field, memEntry, tmpEntry, mem.orElse(null), tmp.get(), disk.get()));", "public class JabRefExecutorService {", "        getOpenDatabaseAction().openFile(file, true);", "    public void requestFocus(Field fieldName) {", "    public void setPasteActionHandler(PasteActionHandler handler) {", "    private void onSelectedGroupChanged(ObservableList<GroupNodeViewModel> newValue) {", "                for (BibEntry entry : pr.getDatabase().getEntries()) {", "    private GridPane getSelectorPanel() {", "    private void onActiveDatabaseChanged(Optional<BibDatabaseContext> newDatabase) {", "        String[] cmd = (application != null) && !application.isEmpty() ? new String[] {\"/usr/bin/open\", \"-a\",", "        keywordGroupSearchField.setText(prefs.get(JabRefPreferences.GROUPS_DEFAULT_FIELD));", "                    clonedEntry.getField(StandardField.CROSSREF).ifPresent(crossref -> {", "        SpecialFieldViewModel printedViewModel = new SpecialFieldViewModel(SpecialField.PRINTED, undoManager);", "    private String[] getStringArrayRepresentation(ExternalFileType type) {", "        Abbreviation abbreviation = journalAbbreviationRepository.getAbbreviation(text).get(); // must be here", "    public void writeOrCreate() throws IOException {", "    private static Image getImageFX(String name) {", "            root.setSelected(true);", "        GlobalBibtexKeyPattern keypatterns = getKeyPatternAsGlobalBibtexKeyPattern();", "            TABLE_ICONS.put(fileType.getField(), icon);", "    public static Supplier<List<MenuItem>> getNameMenu(final TextInputControl textInput) {", "                        uniquefiers.put(key, String.valueOf((char) uniq));", "        for (Iterator<Path> iterator = filesToOpen.iterator(); iterator.hasNext();) {", "    public void automatedImport(List<String> filenames) {", "        if ((directory == null) || !directory.exists() || !directory.isDirectory()) {", "        stateManager.activeDatabaseProperty().bind(", "        AUTO_FILE_LINK(MaterialDesignIcon.FILE_FIND) /*css: file-find */,", "        TABLE_ICONS.put(StandardField.FILE, icon);", "            if (filenames.isEmpty()) {", "        addToGroups(entries, stateManager.getSelectedGroup(database));", "    private final GroupTreeNode m_subtreeBackup;", "    public void searchButtonClicked() {", "    private static Map<String, String> readIconThemeFile(URL url, String prefix) {", "    public boolean delete() {", "            switch (ControlHelper.getDroppingMouseLocation(row, event)) {", "        if (panel == null) {", "public class ExporterViewModel {", "class BibtexKeyPatternPrefTab extends BibtexKeyPatternPanel implements PreferencesTab {", "        xSet.insert(xImpLoader.activate(\"com.sun.star.comp.loader.JavaLoader\", null, null, null));", "        final Timer searchTask = FxTimer.create(Duration.ofMillis(400), () -> {", "        VBox explicitPanel = createOptionsExplicitGroup();", "public class ThemeLoader {", "        ExporterFactory.entryNumber = 1; // Set entry number in case that is included in the preview layout.", "        button.graphicProperty().unbind();", "                    default:", "@SuppressWarnings(\"unused\") // class is indirectly constructed by log4j", "            switch (mouseLocation) {", "    public static void openFolderAndSelectFile(Path fileLink) throws IOException {", "    private static Map<String, String> readIconThemeFile(URL url, String prefix) {", "public class UndoableRemoveEntry extends AbstractUndoableJabRefEdit {", "        boolean isModifiedLocally = (DuplicateCheck.compareEntriesStrictly(memEntry, tmpEntry) <= 1);", "        if (Globals.prefs == null) {", "    public BibEntry getMergeEntry() {", "    public void focus() {", "    public abstract boolean shouldShow(BibEntry entry);", "            basePanel.getUndoManager().registerListener(new UndoRedoEventManager());", "        TABLE_ICONS.put(StandardField.EPRINT, icon);", "    void operationCompleted();", "    public UndoableAddOrRemoveGroup(GroupTreeNodeViewModel groupsRoot,", "            Class<?> clazz = Class.forName(\"javafx.scene.control.TableUtil\");", "        xSet.insert(xImpLoader.activate(\"com.sun.star.comp.connections.Acceptor\", null, null, null));", "    public void updateFont() {", "                        List<Integer> num = new ArrayList<>(keys.length);", "                    ParserResult pr = importer.get().importDatabase(filename, Globals.prefs.getDefaultEncoding());", "        XComponentContext xContext = org.jabref.gui.openoffice.Bootstrap.bootstrap(loader);", "    private final int m_editType;", "        HBox fontBox = new HBox();", "                        LOGGER.debug(\"Mode MOVE\");", "public class EntryEditor extends BorderPane {", "        setupKeyBindings(keyBindingRepository);", "                return new ReadOnlyStringWrapper(\"\");", "        Exporter defaultChoice = exporters.stream()", "                    int uniq = 'a';", "public class ViewModelTableRowFactory<S> implements Callback<TableView<S>, TableRow<S>> {", "        OS.NEWLINE = Globals.prefs.get(JabRefPreferences.NEWLINE);", "        for (String key : cited) {", "            String sConnect = \"uno:socket,host=localhost,port=2083\" + \";urp;StarOffice.ComponentContext\";", "    protected static String processPreview(List<String> citations) {", "            populateSubMenu(items, \"IEEETran\", IEEETranEntryTypeDefinitions.ALL, entry, undoManager);", "            visibleComponents.sort(new PreferredIndexSort());", "    List<String> getRestartWarnings();", "            ParserResult parserResult = OpenDatabase.loadDatabase(file.toFile(),", "            List<String> dir = databaseContext.getFileDirectories(field, Globals.prefs.getFilePreferences());", "        annotationList.getSelectionModel().setSelectionMode(SelectionMode.SINGLE);", "    public static XComponentContext createInitialComponentContext(Map<String, Object> context_entries) throws Exception {", "            switch (m_editType) {", "    private void generateKeys(List<BibEntry> entries) {", "public class HelpAction extends SimpleCommand {", "        List<LinkedFile> filesToSerialize = files.stream()", "    public <T> void putValue(Class<T> type, T value) {", "            XComponentContext xLocalContext = createInitialComponentContext((Map<String, Object>) null);", "        anySelectedEntriesMatched.invalidate();", "    private Optional<BibEntry> findInternalDuplicate(BibEntry entry) {", "        if (!toRemove.isEmpty()) {", "        for (Map.Entry<String, Set<Field>> tab : entryEditorPreferences.getEntryEditorTabList().entrySet()) {", "public final class EntryEditorTabList {", "public class ExternalFileTypes {", "        boolean hadBibSection = getBookmarkRange(OOBibBase.BIB_SECTION_NAME) != null;", "            boolean success = saveDatabase(targetPath, false,", "public interface PushToApplication {", "public class OpenHyperlinksInExternalBrowser implements ChangeListener<Worker.State>, EventListener {", "public class ViewModelTreeTableCellFactory<S> implements Callback<TreeTableColumn<S, S>, TreeTableCell<S, S>> {", "    public static URL getIconUrl(String name) {", "        browser.addEventFilter(javafx.scene.input.MouseEvent.ANY, javafx.scene.input.MouseEvent::consume);", "            correctEntries = entries;", "        for (Observable observable : newEntry.getObservables()) {", "    public SuggestionProviders() {", "public class NoSelectionModel<T> extends MultipleSelectionModel<T> {", "    public void moveDown(SidePaneComponent comp) {", "            prefs.clearPassword(); // for the case that the password is already set", "            Set<Field> jointFields = new TreeSet<>(Comparator.comparing(Field::getName));", "public class RelatedArticlesTab extends EntryEditorTab {", "        GroupTreeNode newParent = root.getNode().getDescendant(pathToNewParent).get(); //TODO: NULL", "public class TemporalAccessorPicker extends DatePicker {", "public abstract class SimpleCommand extends CommandBase {", "            NamedCompound ce = new NamedCompound(Localization.lang(\"Merge entries\"));", "            Optional<String> valInNewField = entry.getField(newField);", "        this.inMem = inMem; // Holds the version in memory. Check if it has been modified...?", "public class AbbreviationViewModel {", "    public void jumpToEntry(ParsedEntryLink parsedEntryLink) {", "            basePanel.closeBottomPane();", "public enum DroppingMouseLocation {", "    public void storeSettings() {", "        this.frame = frame;", "public class UnlinkedFilesCrawler extends BackgroundTask<CheckBoxTreeItem<FileNodeWrapper>> {", "            fields.addAll(entry.getFields());", "", "    public List<BasePanel> getBasePanelList() {", "        entriesSorted = new SortedList<>(entriesFiltered);", "    private ScrollPane getRelatedArticleInfo(List<BibEntry> list, MrDLibFetcher fetcher) {", "        base.removeString(string.getId());", "    public List<String> refreshCiteMarkers(List<BibDatabase> databases, OOBibStyle style)", "        private void updateTexts(UndoChangeEvent event) {", "                GroupTreeNode newNode = m_subtreeBackup.copySubtree();", "    private void openFile(Path filePath) {", "            Class<?> clazz = Class.forName(\"javafx.scene.control.TableUtil\");", "            } else {", "public class ContentSelectorSuggestionProvider implements AutoCompleteSuggestionProvider<String> {", "            if (oldValue == null) {", "        setPrefHeight(Double.POSITIVE_INFINITY);", "        tearDownJabRef(filenames);", "                return new ContentSelectorSuggestionProvider((AutoCompleteSuggestionProvider<String>) suggestionProvider, contentSelectorValues);", "        XNamed xNamed = UnoRuntime.queryInterface(XNamed.class, bookmark);", "    public void append(LogEvent rawEvent) {", "        ControlHelper.setAction(saveButton, getDialogPane(), event -> savePreferencesAndCloseDialog());", "    public static final String FRAME_TITLE = \"JabRef\";", "    protected boolean couldNotCall; // Set to true in case the command could not be executed, e.g., if the file is not found", "            row.contextMenuProperty().bind(", "public class CitationStyleToClipboardWorker {", "public class CustomExternalFileType implements ExternalFileType {", "                    if (!sb.toString().trim().isEmpty()) {", "        catch (IOException excep) {", "public class UnlinkedPDFFileFilter implements FileFilter {", "        List<BibEntry> toRemove = new ArrayList<>(entries.size());", "public enum AutoCompleteFirstNameMode {", "    private List<Integer> findCitedEntryIndex(String citRefName, List<String> keys) {", "        postUndoRedoEvent(); // Send event to trigger changes", "public class ManageJournalAbbreviationsViewModel extends AbstractViewModel {", "    public void show(SidePaneType type) {", "            if (bibtexResult == null) {", "public class OpenDatabaseAction extends SimpleCommand {", "        TABLE_ICONS.put(SpecialField.PRIORITY, icon);", "        if (!identicalTypes && !typeRadioButtons.isEmpty() && typeRadioButtons.get(0).isSelected()) {", "            if (this.stringConverter == null) {", "    public void installCss(Scene scene, JabRefPreferences preferences) {", "        getGroupNode().moveTo(target.getGroupNode());", "            return pathname -> true;", "    private final Version installedVersion;", "                if (strippedLink.substring(strippedLinkIndex + 1).indexOf('/') >= 1) {", "    public void setupAllTables() {", "            notifyNewSelectedFile(currentFile);", "                    default:", "        Platform.runLater(() -> {", "                types[i] = type; // Remember the type in case we need to uniquefy.", "            String howToReproduce = \"Steps to reproduce:\\n\\n1. ...\\n2. ...\\n3. ...\";", "                        pr.getDatabaseContext().clearDatabaseFile(); // do not open the original file", "    ENTRY_EDITOR_PREVIOUS_PANEL_2(\"Entry editor, previous panel 2\", Localization.lang(\"Entry editor, previous panel 2\"), \"ctrl+MINUS\", KeyBindingCategory.VIEW),", "            stateManager.activeSearchQueryProperty().set(newBasePanel.getCurrentSearchQuery());", "        StackPane helpButtonContainer = new StackPane();", "    private final int m_subtreeRootChildCount;", "    private static UndoableEdit massRenameField(Collection<BibEntry> entries, Field field, Field newField,", "    public static final int ADD_NODE = 0;", "    public boolean dragDropped(ListProperty<PreviewLayout> targetList, Dragboard dragboard) {", "        LOOKUP_IDENTIFIER(MaterialDesignIcon.MAGNIFY), // TODO: use WEB_SEARCH instead as soon as it is available", "    public <V> Future<V> execute(BackgroundTask<V> task) {", "    public String getDefaultKeyBinding() {", "            dialogService.notify(Localization.lang(\"Added group \\\"%0\\\".\", group.getName()));", "                    new LatexFieldFormatter(fieldFormatterPreferences).format(newValue, fieldName);", "            ControlsFxVisualizer visualizer = new ControlsFxVisualizer();", "        if (nameChange) {", "        if (!result.getToAdd().isEmpty()) {", "            markingContent = markingContent.replaceAll(\"-\" + NEWLINE, \"\");", "    public <T> BackgroundTask<T> thenRun(Function<V, T> nextOperation) {", "public class CheckForNewEntryTypesAction implements GUIPostOpenAction {", "    private void openTheFile(Path file, boolean raisePanel) {", "        entryEditorTabs.add(new OtherFieldsTab(databaseContext, panel.getSuggestionProviders(), undoManager,", "        entriesList = databaseContext.getDatabase().getEntries();", "public class FindFullTextAction extends SimpleCommand {", "public class CustomizeExternalFileTypesDialog extends BaseDialog<Void> {", "        ToggleGroup groupType = new ToggleGroup();", "public abstract class BackgroundTask<V> {", "    protected abstract void bindToEntry(BibEntry entry);", "                    Object context = xUrlResolver.resolve(sConnect);", "        if (dataBaseNumber >= 0) {", "        new PersistenceVisualStateTable(this, Globals.prefs);", "public class AutosaveUIManager {", "        UpdateField.setAutomaticFields(entries, updateFieldPreferences);", "        PreviewPreferences previewPreferences = Globals.prefs.getPreviewPreferences();", "                XFootnote footer = UnoRuntime.queryInterface(XFootnote.class, range.getText());", "    private static void ensureCorrectJavaVersion() {", "        typeSubscription = EasyBind.subscribe(this.entry.typeProperty(), type -> {", "                continue;", "    public static Optional<String> getSuffix(final String link) {", "            return Optional.empty();", "    private final List<String> columnHeadings = Arrays.asList(Localization.lang(\"Field\"),", "        XTextContent xTextContent = UnoRuntime.queryInterface(XTextContent.class, bookmark);", "    public void editAbbreviation(String name, String abbreviation) {", "    private void updateMergedEntry() {", "            panel.setSaving(false);", "        if (exporter != null) {", "            } else if (answer == DuplicateResolverDialog.DuplicateResolverResult.KEEP_BOTH) {", "public class UndoableInsertEntry extends AbstractUndoableJabRefEdit {", "    public void storeSettings() {", "    protected abstract boolean isMatch(T suggestion, ISuggestionRequest request);", "        final boolean namesNatbib = Globals.prefs.getBoolean(JabRefPreferences.NAMES_NATBIB); //MK:", "    public void insertEntry(List<BibEntry> entries, BibDatabase database,", "        MetaData metaData = panel.getBibDatabaseContext().getMetaData();", "            cleanUpMovePDF.setDisable(true);", "            Field privatePopup = AutoCompletionBinding.class.getDeclaredField(\"autoCompletionPopup\");", "                if (newGroups.getGroup() instanceof AllEntriesGroup) {", "class OOBibBase {", "                if (!handleMultipleAppInstances(arguments) || argumentProcessor.shouldShutDown()) {", "    public void about() {", "    public JabRefIcon getTypeIcon() {", "            selectedFieldName.ifPresent(this::requestFocus);", "    public abstract int getPageNumber();", "        String suffix;", "        browser.getEngine().getLoadWorker().progressProperty().addListener((observable, oldValue, newValue) -> {", "            for (Field field : jointFields) {", "        boolean citePressed = dialogService.showConfirmationDialogAndWait(Localization.lang(\"Cite\"),", "            String quotePath = \"\\\"\" + filePath + \"\\\"\";", "public class AbbreviationsFileViewModel {", "            xCursorProps.setPropertyValue(\"CharLocale\", new Locale(\"zxx\", \"\", \"\"));", "        info.setStyle(\"-fx-padding: 0.5em 0 0.5em 0;\"); // To align with buttons below which also have 0.5em padding", "        } else {", "    private Optional<BibEntry> entry = Optional.empty();", "            String[] allParams = {viewModel.getLocalization(), params[0], params[1]};", "            background.setWidth(getDesiredWidth());", "        setGraphic(menu, action);", "class UndefinedCharacterFormatException extends Exception {", "    <V> Future<?> schedule(BackgroundTask<V> task, long delay, TimeUnit unit);", "        OPEN(MaterialDesignIcon.FOLDER_OUTLINE) /*css: folder */,", "public class AutoLinkFilesAction extends SimpleCommand {", "    public static XComponentContext createInitialComponentContext(Hashtable<String, Object> context_entries) throws Exception {", "    requires java.desktop;", "    requires java.prefs;", "    requires java.annotation;", "    requires org.jabref.thirdparty.libreoffice;", "public class DatabaseChangeEvent {", "public class DatabaseChangeEvent {", "public interface DatabaseChangeListener {", "public class DatabaseChangeRegistration {", "    public void addListener(@SuppressWarnings(\"unused\") DatabaseChangeListener listener) {", "        SearchQuery searchQuery = new SearchQuery(\"Journal Title 500\", false, false);", "        SearchQuery searchQuery = new SearchQuery(\"Journal Title 500\", false, false);", "public class OracleConnection implements Connection {", "public class OracleDriver {", "public class OracleStatement {", "package oracle.jdbc;", "public class AbstractViewModel {", "public @interface ApacheCommonsLang3Allowed {", "    String value();", "            System.out.println(new AuxParserResultViewModel(result).getInformation(true));", "public enum BasePanelMode {", "    public void setContent(ClipboardContent content) {", "    public String getContents() {", "    private static Optional<ParserResult> importToOpenBase(String argument) {", "    private Optional<ParserResult> fetch(String fetchCommand) {", "                file = new URLDownload(address).toTemporaryFile();", "                System.out.println(Localization.lang(\"Importing in unknown format\") + \": \" + file);", "        if (cli.isPreferencesReset()) {", "        if (cli.isPreferencesImport()) {", "        List<ParserResult> loaded = importAndOpenFiles();", "        String searchTerm = data[0].replace(\"\\\\$\", \" \"); //enables blanks within the search term:", "        if (!matches.isEmpty()) {", "            switch (data.length) {", "                    formatName = \"tablerefsabsbib\";", "            Optional<Exporter> exporter = Globals.exportFactory.getExporterByName(formatName);", "                boolean bibExtension = aLeftOver.toLowerCase(Locale.ENGLISH).endsWith(\"bib\");", "                    if (startupMode == Mode.INITIAL_START) {", "            if ((newBase != null) && newBase.hasEntries()) {", "            if (fileWriter.hasEncodingProblems()) {", "            if (!loaded.isEmpty()) {", "            ParserResult pr = loaded.get(loaded.size() - 1);", "            File theFile = pr.getFile().get();", "                                                         }));", "    private class SearchAutoCompleteListener {", "    public SuggestionProviders getSuggestionProviders() {", "    private void copyCitationToClipboard(CitationStyleOutputFormat outputFormat) {", "    public void delete(boolean cut) {", "    public void runCommand(final Actions command) {", "    public void insertEntry(final BibEntry bibEntry) {", "    private void setupAutoCompletion() {", "    public void showAndEdit(BibEntry entry) {", "    public void clearAndSelect(final BibEntry bibEntry) {", "    public void entryEditorClosing() {", "    private void ensureNotShowingBottomPanel(BibEntry entry) {", "    private void saveDividerLocation(Number position) {", "    public List<BibEntry> getSelectedEntries() {", "    public void setCurrentSearchQuery(Optional<SearchQuery> currentSearchQuery) {", "    private class SearchAutoCompleteListener {", "    private class SearchListener {", "    private final Map<Actions, BaseAction> actions = new HashMap<>();", "    private BasePanelMode mode = BasePanelMode.SHOWING_NOTHING;", "    private PersonNameSuggestionProvider searchAutoCompleter;", "    private BibEntry showing;", "    private Optional<SearchQuery> currentSearchQuery = Optional.empty();", "        this.bibDatabaseContext.getDatabase().registerListener(new GroupTreeListener());", "        this.bibDatabaseContext.getDatabase().registerListener(this);", "                String changeFlag = isModified() && !isAutosaveEnabled ? \"*\" : \"\";", "                    title.append('*');", "        actions.put(Actions.COPY, this::copy);", "        actions.put(Actions.PASTE, this::paste);", "        actions.put(Actions.COPY_KEY, this::copyKey);", "        actions.put(Actions.COPY_TITLE, this::copyTitle);", "        actions.put(Actions.COPY_CITE_KEY, this::copyCiteKey);", "        actions.put(Actions.COPY_KEY_AND_LINK, new CopyBibTeXKeyAndLinkAction(mainTable, Globals.clipboardManager));", "            List<String> titles = selectedBibEntries.stream()", "                output(Localization.lang(\"Copied\") + \" '\" + JabRefDialogService.shortenDialogMessage(copiedTitles) + \"'.\");", "            for (BibEntry be : bes) {", "                output(Localization.lang(\"Copied\") + \" '\" + JabRefDialogService.shortenDialogMessage(copiedCiteCommand) + \"'.\");", "            for (BibEntry be : bes) {", "                output(Localization.lang(\"Copied\") + \" '\" + JabRefDialogService.shortenDialogMessage(copiedKeys) + \"'.\");", "            StringReader sr = new StringReader(\"\\\\bibtexkey - \\\\begin{title}\\\\format[RemoveBrackets]{\\\\title}\\\\end{title}\\n\");", "            for (BibEntry be : bes) {", "                output(Localization.lang(\"Copied\") + \" '\" + JabRefDialogService.shortenDialogMessage(copiedKeysAndTitles) + \"'.\");", "                UpdateField.setAutomaticFields(bibEntry, true, true, Globals.prefs.getUpdateFieldPreferences());", "                getUndoManager().addEdit(new UndoableInsertEntry(bibDatabaseContext.getDatabase(), bibEntry));", "                markBaseChanged(); // The database just changed.", "            entryEditor.setFocusToField(field);", "        mainTable.addSelectionListener(listEvent -> Globals.stateManager.setSelectedEntries(mainTable.getSelectedEntries()));", "        mainTable.addSelectionListener(event -> mainTable.getSelectedEntries()", "        /*", "        adjustSplitter(); // restore last splitting state (before mainTable is created as creation affects the stored size of the entryEditors)", "        instantiateSearchAutoCompleter();", "        dividerPositionSubscription = EasyBind.monadic(Bindings.valueAt(splitPane.getDividers(), 0))", "            resetChangeMonitorAndChangePane();", "                this.baseChanged = true;", "            CoarseChangeFilter changeFilter = new CoarseChangeFilter(bibDatabaseContext);", "            suggestionProviders = new SuggestionProviders();", "        frame.setWindowTitle();", "            FileFinder fileFinder = FileFinders.constructFromConfiguration(Globals.prefs.getAutoLinkPreferences());", "            if (Globals.prefs.getBoolean(JabRefPreferences.AUTO_ASSIGN_GROUP)) {", "            DefaultTaskExecutor.runInJavaFXThread(() -> frame.getGlobalSearchBar().performSearch());", "                    List<LinkedFile> files = bes.get(0).getFiles();", "public class CrossrefFetcherEvaluator {", "    private static Object createDependency(Class<?> clazz) {", "        Injector.setInstanceSupplier(DefaultInjector::createDependency);", "public interface DialogService {", "    <T> Optional<T> showChoiceDialogAndWait(String title, String content, String okButtonLabel, T defaultChoice, Collection<T> choices);", "    Optional<String> showInputDialogAndWait(String title, String content);", "    Optional<String> showInputDialogWithDefaultAndWait(String title, String content, String defaultValue);", "    void showInformationDialogAndWait(String title, String content);", "    void showWarningDialogAndWait(String title, String content);", "    void showErrorDialogAndWait(String title, String content);", "    void showErrorDialogAndWait(String message, Throwable exception);", "    void showErrorDialogAndWait(String title, String content, Throwable exception);", "    void showErrorDialogAndWait(String message);", "    boolean showConfirmationDialogAndWait(String title, String content);", "    boolean showConfirmationDialogAndWait(String title, String content, String okButtonLabel);", "    boolean showConfirmationDialogAndWait(String title, String content, String okButtonLabel, String cancelButtonLabel);", "    boolean showConfirmationDialogWithOptOutAndWait(String title, String content,", "    boolean showConfirmationDialogWithOptOutAndWait(String title, String content,", "    <R> Optional<R> showCustomDialogAndWait(Dialog<R> dialog);", "    <V> void showProgressDialogAndWait(String title, String content, Task<V> task);", "    void notify(String message);", "    Optional<Path> showFileSaveDialog(FileDialogConfiguration fileDialogConfiguration);", "    Optional<Path> showFileOpenDialog(FileDialogConfiguration fileDialogConfiguration);", "    List<Path> showFileOpenDialogAndGetMultipleFiles(FileDialogConfiguration fileDialogConfiguration);", "    Optional<Path> showDirectorySelectionDialog(DirectoryDialogConfiguration directoryDialogConfiguration);", "    boolean showPrintDialog(PrinterJob job);", "    Optional<Path> showFileOpenFromArchiveDialog(Path archivePath) throws IOException;", "public class DragAndDropDataFormats {", "public class EntryTypeView extends BaseDialog<EntryType> {", "            return type;", "        bibTexTitlePane.managedProperty().bind(bibTexTitlePane.visibleProperty());", "                            break;", "public class FXDialog extends Alert {", "    public static JournalAbbreviationLoader journalAbbreviationLoader;", "    public static ProtectedTermsLoader protectedTermsLoader;", "    public static ClipBoardManager clipboardManager = new ClipBoardManager();", "    public static final RemoteListenerServerLifecycle REMOTE_LISTENER = new RemoteListenerServerLifecycle();", "    public static JabRefPreferences prefs;", "    private static KeyBindingRepository keyBindingRepository;", "    public static synchronized KeyBindingRepository getKeyPrefs() {", "    public static void startBackgroundTasks() throws JabRefException {", "            SDKShutdownActivity.INSTANCE.stopAll();", "public class GUIGlobals {", "    public static void init() {", "    public static final int WIDTH_ICON_COL = 16 + 12; // add some additional space to improve appearance", "    public static final int WIDTH_ICON_COL_RANKING = 5 * 16; // Width of Ranking Icon Column", "        GUIGlobals.updateEntryEditorColors();", "        Globals.prefs.putInt(JabRefPreferences.FONT_SIZE, size);", "    private static final int WIDTH = 100; // Number of characters per line", "        options.addOption(\"h\", \"help\", false, Localization.lang(\"Display help on command line options\"));", "public class JabRefDialogService implements DialogService {", "        alert.getDialogPane().applyCss();", "        alert.setDialogPane(new DialogPane() {", "        alert.getDialogPane().setExpandableContent(new Group());", "public class JabRefLauncher {", "public class SidePane extends BorderPane {", "    public void beforeClosing() {", "    public void afterOpening() {", "    public void afterOpening() {", "        return null;", "        return false;", "        return null;", "        return null;", "        return null;", "        return null;", "    public void setAutoCommit(boolean autoCommit) throws SQLException {", "        return false;", "    public void commit() throws SQLException {", "    public void rollback() throws SQLException {", "    public void close() throws SQLException {", "        return false;", "        return null;", "    public void setReadOnly(boolean readOnly) throws SQLException {", "        return false;", "    public void setCatalog(String catalog) throws SQLException {", "        return null;", "    public void setTransactionIsolation(int level) throws SQLException {", "        return 0;", "        return null;", "    public void clearWarnings() throws SQLException {", "        return null;", "        return null;", "        return null;", "        return null;", "    public void setTypeMap(Map<String, Class<?>> map) throws SQLException {", "    public void setHoldability(int holdability) throws SQLException {", "        return 0;", "        return null;", "        return null;", "    public void rollback(Savepoint savepoint) throws SQLException {", "    public void releaseSavepoint(Savepoint savepoint) throws SQLException {", "        return null;", "        return null;", "        return null;", "        return null;", "        return null;", "        return null;", "        return null;", "        return null;", "        return null;", "        return null;", "        return false;", "    public void setClientInfo(String name, String value) throws SQLClientInfoException {", "    public void setClientInfo(Properties properties) throws SQLClientInfoException {", "        return null;", "        return null;", "        return null;", "        return null;", "    public void setSchema(String schema) throws SQLException {", "        return null;", "    public void abort(Executor executor) throws SQLException {", "    public void setNetworkTimeout(Executor executor, int milliseconds) throws SQLException {", "        return 0;", "    public void savePartOfDatabase(BibDatabaseContext bibDatabaseContext, List<BibEntry> entries) throws IOException {", "public class AutosaveEvent {", "    private final DuplicationChecker duplicationChecker = new DuplicationChecker();", "    protected void writeMetaData(MetaData metaData, GlobalBibtexKeyPattern globalCiteKeyPattern) throws IOException {", "    public boolean hasEntries() {", "    public boolean containsEntryWithId(String id) {", "    public Set<Field> getAllVisibleFields() {", "    public synchronized List<BibEntry> getEntriesByKey(String key) {", "    public synchronized boolean insertEntry(BibEntry entry, EntryEventSource eventSource) throws KeyCollisionException {", "    public synchronized void removeEntry(BibEntry toBeDeleted) {", "    public synchronized void setPreamble(String preamble) {", "    public void removeString(String id) {", "    public BibtexString getString(String id) {", "    public boolean hasNoStrings() {", "    public void copyPreamble(BibDatabase database) {", "    public BibEntry resolveForStrings(BibEntry entry, boolean inPlace) {", "        Optional<Month> month = Month.getMonthByShortName(label);", "            for (BibEntry entry : toChange) {", "                    newRes.append(res.substring(next));", "    private Optional<Path> file;", "    public Optional<Path> getFirstExistingFileDir(FilePreferences preferences) {", "        comparators.add(new CrossRefEntryComparator());", "        return getFileDirectories(preferences).stream()", "        preferences.getFileDirectory(field).ifPresent(path -> fileDirs.add(path.toAbsolutePath().toString()));", "                relDir = databaseFile.get().getParent();", "    public BibDatabaseMode getOppositeMode() {", "    private T parent;", "    private T child;", "    public Optional<T> getParent() {", "    public boolean isAncestorOf(T anotherNode) {", "    public void addAtEnd(T node) {", "@SuppressWarnings(\"unchecked\") // We use some explicit casts of the form \"(T) this\". The constructor ensures that this cast is valid.", "public class CoarseChangeFilter {", "        uriBuilder.addParameter(\"query\", createQueryString(query)); // Search all fields", "        Set<BibEntryType> typesToWrite = new HashSet<>();", "public class DatabaseNotSupportedException extends Exception {", "        if (preferences.getSaveType() != SavePreferences.DatabaseSaveType.PLAIN_BIBTEX) {", "    private final Map<String, Integer> allKeys = new HashMap<>();", "    private void removeKeyFromSet(String key) {", "    private List<FieldChange> cleanupSingleField(Field fieldKey, BibEntry entry) {", "    private Consumer<T> onDescendantChanged = t -> {", "    private final ObservableList<T> children;", "    private T parent;", "    public int getPositionInParent() {", "    public int getLevel() {", "    public List<T> getPathFromRoot() {", "    public Optional<T> getPreviousSibling() {", "    protected boolean childIndexExists(int index) {", "            if (entryTypesManager.isCustomType(entry.getType(), bibDatabaseContext.getMode())) {", "    public void removeFromParent() {", "                entryTypesManager.enrich(entry.getType(), bibDatabaseContext.getMode()).ifPresent(typesToWrite::add);", "    public void sortChildren(Comparator<? super T> comparator, boolean recursive) {", "    public void moveTo(T target, int targetIndex) {", "    public T copySubtree() {", "            return; // nothing to sort", "    public static void runMigrations() {", "    private static void upgradeFaultyEncodingStrings(JabRefPreferences prefs) {", "    private static void upgradeSortOrder(JabRefPreferences prefs) {", "            writeEntryTypeDefinitions(typesToWrite);", "            if (mainPrefsNode.get(JabRefPreferences.DEFAULT_BIBTEX_KEY_PATTERN, null) == null) {", "            if (mainPrefsNode.nodeExists(JabRefPreferences.BIBTEX_KEY_PATTERNS_NODE)) {", "        writeEpilogue(bibDatabaseContext.getDatabase().getEpilog());", "    public abstract String getKey();", "    public abstract String format(String value);", "public class ACS implements FulltextFetcher {", "    public int hashCode() {", "            if (!groupedByField.containsKey(key)) {", "            List<String> formattersForKey = groupedByField.get(key);", "        StringBuilder result = new StringBuilder();", "        String content = bibtexString.getContent();", "public class BiblioscapeImporter extends Importer {", "                continue; // ignore empty lines, e.g. at file", "            if (\"------\".equals(line)) {", "                                .getValue().toString());", "                for (int i = 1; (i >= 0) && BibEntry.DEFAULT_TYPE.equals(bibtexType); --i) {", "                if (bibtexType.equals(StandardEntryType.Article)) {", "                if (address != null) {", "                if (!comments.isEmpty()) { // set comment if present", "    public static Optional<BibEntry> getEntry(String entryUrl, ImportFormatPreferences importFormatPreferences) {", "        for (BibtexString original : originalDatabase.getStringValues()) {", "                if (!Objects.equals(original.getContent(), match.get().getContent())) {", "                    differences.add(new BibStringDiff(original, match.get()));", "                notMatched.add(original);", "        for (Iterator<BibtexString> iterator = notMatched.iterator(); iterator.hasNext(); ) {", "        newDatabase.getStringValues().stream()", "    private int convertSpecialChar(StringBuilder sb, char[] c, int start, FORMAT_MODE format) {", "            Document html = Jsoup.connect(source).ignoreHttpErrors(true).get();", "    public static Optional<String> findSpecialChar(char[] c, int pos) {", "        ALL_LOWERS('l'),", "        if (preferences.isSaveInOriginalOrder()) {", "        i++; // skip over open brace", "            Optional<String> s = BibtexCaseChanger.findSpecialChar(c, i);", "    public String format(String input) {", "public class ChangeCaseFunction implements BstFunction {", "                for (Field field : FIELDS) {", "    public static List<BibEntry> getSortedEntries(BibDatabaseContext bibDatabaseContext, List<BibEntry> entriesToSort, SavePreferences preferences) {", "public class DiVA implements IdBasedParserFetcher {", "public class DoiResolution implements FulltextFetcher {", "            if (!sciLink.isEmpty()) {", "                    connection.timeout(10000);", "                        if ((href.contains(\"pdf\") || hrefText.contains(\"pdf\")) && new URLDownload(href).isPdf()) {", "                    if (links.size() == 1) {", "    public List<String> getValue(EntryType entryType) {", "        row.startFullDrag();", "    public static List<Field> SUPPORTED_FIELDS = Arrays.asList(StandardField.DOI, StandardField.EPRINT, StandardField.ISBN);", "                mergedEntry.setField(field, leftString.get()); // Will only happen if both entries have the field and the content is identical", "                mergedEntry.setField(field, rightEntry.getField(field).get()); // Will only happen if field exists", "    public static final String[] getDefaultOptions() {", "                boolean disable_dynloading = false;", "    private XTextRange getBookmarkRange(String name) throws NoSuchElementException, WrappedTargetException {", "        text = mxDoc.getText();", "            throw new ConnectionLostException(ex.getMessage());", "public class SidePaneManager {", "                    for (int j = 0; j < cEntries.length; j++) {", "        text.insertTextContent(position, xTextContent, true);", "        Optional<String> pageInfo = getCustomProperty(name);", "        XTextContent xTextContent = UnoRuntime.queryInterface(XTextContent.class, bookmark);", "        XBookmarksSupplier xBookmarksSupplier = UnoRuntime.queryInterface(XBookmarksSupplier.class, xCurrentComponent);", "                String bName = getUniqueReferenceMarkName(keyString, OOBibBase.AUTHORYEAR_PAR);", "                    resultDatabase.insertEntry(clonedEntry);", "        if (!emptyKeys) {", "        Optional<Path> actualFile = chooseAmongInstallations(installations);", "class ConnectionLostException extends RuntimeException {", "public class PreferencesDialogView extends BaseDialog<PreferencesDialogViewModel> {", "    private void jumpToSearchKey(ListView<PreviewLayout> list, KeyEvent keypressed) {", "    private class PreferredIndexSort implements Comparator<SidePaneComponent> {", "    void setValues();", "        for (PreferencesTab tab : preferenceTabs) {", "        HBox themeBox = new HBox();", "    boolean validateSettings();", "        Label keyGeneratorSettings = new Label(Localization.lang(\"Key generator settings\"));", "    public StringProperty mainFileDirProperty() { return mainFileDirProperty; }", "public class StateManager {", "                    LOGGER.debug(\"Mode MOVE\"); //shift on win or no modifier", "        return menu;", "    boolean requiresBibtexKeys();", "                    prefix.concat(\"\\\"\" + getCiteCommand().replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\") + \"{\" + keys + \"}\\\"\").concat(suffix);", "            base.removeEntry(entry);", "        base.setPreamble(newValue);", "        ViewLoader.view(this)", "    private final boolean separationBySpace;", "                        setOnContextMenuRequested(event -> {", "public class OnlyIntegerFormatter extends TextFormatter<Integer> {", "    private static PseudoClass dragOverBottom = PseudoClass.getPseudoClass(\"dragOver-bottom\");", "            row.setOnContextMenuRequested(event -> {", "public class TooltipTextUtil {", "    <V> Future<V> execute(Task<V> task);", "    void shutdown();", "            return true;", "public class AutoCompleteUpdater {", "        final CountDownLatch doneLatch = new CountDownLatch(1);", "    private StringConverter<T> converter;", "    public BackgroundTask<Void> thenRun(Consumer<V> nextOperation) {", "        boolean openFolders = JabRefPreferences.getInstance().getBoolean(JabRefPreferences.OPEN_FOLDERS_OF_ATTACHED_FILES);", "    public void addPossibleSuggestions(Collection<T> newPossible) {", "    private final Map<Field, AutoCompleteSuggestionProvider<?>> providers = new HashMap<>();", "public class WordSuggestionProvider extends StringSuggestionProvider implements AutoCompleteSuggestionProvider<String> {", "        int columnsNumber = 2;", "    public BasePanel getBasePanelAt(int i) {", "public class CopyFilesResultListDependency {", "    public void openPdfWithParameters(String filePath, List<String> parameters) throws IOException {", "    /*", "    void openPdfWithParameters(String filePath, List<String> parameters) throws  IOException;", "            if (!file.isPresent() || !Files.exists(file.get())) {", "                command = command.replaceAll(\"\\\\s+\", \" \"); // normalize white spaces", "        EasyBind.subscribe(currentPage, this::showPage);", "            viewModel.getKeywords().set(event.getTablePosition().getRow(), event.getNewValue());", "            Optional<FieldChange> change = entry.putKeywords(keywords, preferences.getKeywordDelimiter());", "            for (Map.Entry<Field, String> field : outOfFocusEntry.getFieldMap().entrySet()) {", "            if (!Objects.equals(newEntry.getType(), outOfFocusEntry.getType())) {", "            return Collections.emptySortedSet();", "    private StackPane getRelatedArticlesPane(BibEntry entry) {", "                        LOGGER.debug(\"Mode MOVE\");", "        entryEditorTabs.add(new RequiredFieldsTab(databaseContext, panel.getSuggestionProviders(), undoManager, dialogService));", "        entryEditorTabs.add(new MathSciNetTab());", "        if (typeSubscription != null) {", "    private EntryType currentEntryType;", "    protected void handleFocus() {", "        content.textProperty().bind(EasyBind.select(viewModel.currentAnnotationProperty()).selectObject(FileAnnotationViewModel::contentProperty));", "    public void copyCurrentAnnotation() {", "    public void reportIssue() {", "        Globals.prefs.fileDirForDatabase = panel.getBibDatabaseContext().getFileDirectoriesAsPaths(Globals.prefs.getFilePreferences()).stream().map(Path::toString).collect(Collectors.toList());", "public class ExportCommand extends SimpleCommand {", "        Globals.prefs.fileDirForDatabase = frame.getCurrentBasePanel()", "        Globals.prefs.put(JabRefPreferences.LAST_USED_EXPORT, format.getName());", "                    return null; // can not use BackgroundTask.wrap(Runnable) because Runnable.run() can't throw Exceptions", "        if (context.getLocation() == DatabaseLocation.SHARED) {", "                        entriesToAdd = xmpEntriesInFile;", "            Files.createDirectories(destination.getParent());", "public class FindUnlinkedFilesDialog extends BaseDialog<Void> {", "        stateManager.activeDatabaseProperty().bind(", "                        return node.path.getFileName() + \" (\" + node.fileCount + \" file\" + (node.fileCount > 1 ? \"s\" : \"\") + \")\";", "        VBox panelDirectory = new VBox(5);", "        EasyBind.subscribe(stateManager.activeSearchQueryProperty(),", "    public Optional<ExternalFileType> getExternalFileTypeForName(String filename) {", "        List<ExternalFileType> defTypes = new ArrayList<>(getDefaultExternalFileTypes());", "                ExternalFileType toRemove = null;", "                types.add(type);", "            setWindowTitle();", "            Optional<ExternalFileType> mimeType = getExternalFileTypeByMimeType(linkedFile.getFileType());", "            return FileHelper.getFileExtension(linkedFile.getLink())", "    public static ExternalFileType buildFromArgs(String[] val) {", "    public void storeSettings() {", "                if (link.substring(index + 1).indexOf('/') >= 1) {", "    void addToContextMenu(final Supplier<List<MenuItem>> items);", "                linkedFileHandler.moveToDefaultDirectory();", "        );", "        taskExecutor.execute(writeTask);", "        if (!suggestedType.isPresent()) {", "    protected T getValueFromString(String string) {", "    public static Supplier<List<MenuItem>> getDOIMenu(TextArea textArea) {", "public class FileListEntry {", "class UndoableMoveGroup extends AbstractUndoableJabRefEdit {", "        for (int i = 0; i < tabbedPane.getTabs().size(); i++) {", "        PseudoClass anySelected = PseudoClass.getPseudoClass(\"any-selected\");", "        m_pathToNode = editedNode.getNode().getIndexedPathFromRoot();", "        for (int i = 0; i < (m_pathToNode.size() - 1); ++i) {", "    private final List<Integer> m_subtreeRootPath;", "    private final List<GroupTreeNode> m_modifiedSubtree = new ArrayList<>();", "        final GroupTreeNode subtreeRoot = m_groupRoot.getDescendant(m_subtreeRootPath).get(); //TODO: NULL", "class GroupDialog extends BaseDialog<AbstractGroup> {", "        HBox mainPanel = new HBox(15);", "                                warnAboutSameName = true;", "        if (editedGroup == null) {", "public class GroupSidePane extends SidePaneComponent {", "        getGroupNode().moveTo(target.getGroupNode());", "            if (targetParent.equals(getParent())) {", "            boolean keepPreviousAssignments = dialogService.showConfirmationDialogAndWait(", "            boolean removePreviousAssignments = (oldGroup.getGroupNode().getGroup() instanceof ExplicitGroup)", "    private static final Set<String> AVAILABLE_LANG_FILES = Stream.of(\"en\", \"de\", \"fr\", \"in\", \"ja\")", "            return false;", "public class ErrorConsoleAction extends SimpleCommand {", "        QUALITY_ASSURED(MaterialDesignIcon.CERTIFICATE), /*css: certificate */", "        PICTURE(MaterialDesignIcon.FILE_IMAGE) /*css: file-image */,", "                    TextInputControl textInput = (TextInputControl) focusOwner;", "        GITHUB(MaterialDesignIcon.GITHUB_CIRCLE), /*css: github-circle*/", "        TOGGLE_ENTRY_PREVIEW(MaterialDesignIcon.LIBRARY_BOOKS), /*css: library-books */", "        CHECK(MaterialDesignIcon.CHECK) /*css: check */,", "        REG_EX(MaterialDesignIcon.REGEX), /*css: mdi-regex */", "                            break;", "        jabRefFrame.getDialogService().showWarningDialogAndWait(dialogTitle, dialogContent.toString());", "                    imports.add(Globals.IMPORT_FORMAT_READER.importUnknownFormat(filename, Globals.getFileUpdateMonitor()));", "                ParserResult pr = importResult.parserResult;", "                UpdateField.setAutomaticFields(entries, Globals.prefs.getUpdateFieldPreferences()); // set timestamp and owner", "                entries.add(dialog.getMergedEntry());", "        if (importEntries) { // Add entries", "    boolean isActionNecessary(ParserResult pr);", "    public void openFile(Path file, boolean raisePanel) {", "    private static final List<GUIPostOpenAction> POST_OPEN_ACTIONS = Arrays.asList(", "                openTheFile(theFile, raisePanel);", "            dialogService.notify(Localization.lang(\"File '%0' is already open.\",", "public class AbbreviateAction implements BaseAction {", "public class UnabbreviateAction implements BaseAction {", "        List<BibEntry> entries = panel.getSelectedEntries(); // never null", "    public class JournalAbbreviationsAbbreviationTableEditingCell extends TableCell<AbbreviationViewModel, String> {", "    public boolean unabbreviate(BibDatabase database, BibEntry entry, Field field, CompoundEdit ce) {", "        TABLE_ICONS.put(SpecialField.QUALITY, icon);", "        TABLE_ICONS.put(SpecialField.RANKING, icon);", "            final JabRefPreferences preferences = JabRefPreferences.getInstance();", "            Class<?> clazz = Class.forName(\"javafx.scene.control.TableUtil\");", "    public void updateFont() {"]